

-- File: prime.tc
let limit, number, counter: int;
const prime <- (n: int): bool => {
let i: int;
let result, isPrime: bool;
if n < 0 then
result <- prime(-n);
else if n < 2 then
result <- false;
else if n = 2 then
result <- true;
else if n % 2 = 0 then
result <- false;
else
i <- 3;
isPrime <- true;
while isPrime and (i < n / 2) loop
isPrime <- n % i != 0;
i <- i + 2;
pool;
result <- isPrime;
fi;
return result;
};

const start <- ():int => {
limit <- readInt();
counter <- 0;
number <- 2;
while number <= limit loop
if prime(number) then
counter <- counter + 1;
writeInt(number);
writeString(" ");
fi;
number <- number + 1;
pool;
writeString("\n");
writeInt(counter);
return 0;
}




(*)
const message <- "Hello world!\n":string;

const cube <- (i: int): int => {
  return i*i*i;
}    
   

const start <- (): int => {
writeString(message);
writeInt(cube(3));
}
(*)
(*)
const t <- " ahashhjj" : string;
let x <- 15 , y : real;
let x ,y <- 15  : int;
let k <- 1.55 : real;
const t <- "ahashhjj" : string;
const t <- true : bool;
let s[80]: string;
;:
const f1 <- (x,y,c:real ,s[]:string):real =>{ 
 let x ,y <- 15  : int;
 x <- 2+3-4*(4-5)/7;
 cube(b+3,x);
  if(a<=b) and (d<=c)then 
  g <-(not 15) % cube(b3,x);
  g <-(not 15) % cube(b+3,x);
  while(d<=c)loop
   g <-(not 15) % cube(b+3);
   g <-(not 15) % cube(b+3,x);
    if(a<=b) and (d<=c)then 
  g <-(not 15) % cube(b+3,x);fi
  pool
 else
  g <- 5;
   if(a<=b) and (d<=c)then 
  g <-(not 15) % cube(b+3,x);fi

 fi
 return x*x;   }
;:
const start <- () : int => {
 let x ,y <- 15  : int;
 x <- 2+3-4*(4-5)/7;
 cube(b+3,x);
  if(a<=b) and (d<=c)then 
  g <-(not 15) % cube(b+3,x);
  g <-(not 15) % cube(b+3,x);
  while(d<=c)loop
   g <-(not 15) % cube(b+3,x);
   g <-(not 15) % cube(b+3,x); 
    if(a<=b) and (d<=c)then 
  g <-(not 15) % cube(b+3,x);fi
  pool
 else
  g <- 5;
   if(a<=b) and (d<=c)then 
  g <-(not 15) % cube(b+3,x);fi

 fi
 readString();
 readReal();
 writeString(s);
 return x*x;
}



while(d<=c)loop
   g <-(not 15) % cube(b+3,x);
   g <-(not 15) % cube(b+3,x); 
  pool

const f1 <- (x,y,c:real ,s[]:string):real{ 
 let x ,y <- 15  : int;
 x <- 2+3-4*(4-5)/7;
 cube(b+3,x);
  if(a<=b) and (d<=c)then 
  g <-(not 15) % cube(b+3,x);
  g <-(not 15) % cube(b+3,x);
  while(d<=c)loop
   g <-(not 15) % cube(b+3,x);
   g <-(not 15) % cube(b+3,x); 
    if(a<=b) and (d<=c)then 
  g <-(not 15) % cube(b+3,x);fi
  pool
 else
  g <- 5;
   if(a<=b) and (d<=c)then 
  g <-(not 15) % cube(b+3,x);fi

 fi
 return x*x;   }



a <-(a<=b) and (d<=c);
g <-(not 15) % cube(b+3,x);
b <- x + c[25] and 98;
const t[8] <- "ahashhjj" : string;
const t <- true : bool;
let s[80]<-"1231231231": string;
let x <- 15 , y : real;
let x ,y <- 15  : int;
let k <- 1.55 : real;
const t <- "ahashhjj" : string;
const t <- true : bool;
let s[80]: string;
return 16;

--Strings \n \t \r
--- const f1 <- (x,y,c:real ,s[]:string):real{ return x*x;} -- TO FIX
-- func parameter validity check
-- t*
-- write String char*
-- 

-- presentation!!!!!!!!!!!!!!!
-- SHOW CORRECT STRINGS 
--
expr:
 POSINT
| REAL
| IDENTIFIER
| IDENTIFIER ARRAY                   { $$ = template("%s%s", $1,$2); }
| func_call
| '(' expr ')'                       { $$ = template("(%s)", $2); }
| prefix_operator expr               { $$ = template("(%s %s)", $1,$2); }
| '+' expr                           { $$ = template("(+%s)",$2); }
| '-' expr                           { $$ = template("(-%s)",$2); }
| KW_NOT expr                           { $$ = template("(!%s)",$2); }
| expr infix_operator expr           { $$ = template("%s %s %s", $1,$2, $3); }(*)
