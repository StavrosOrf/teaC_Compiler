Terminals unused in grammar

   KW_IF
   KW_THEN
   KW_ELSE
   KW_FI
   KW_WHILE
   KW_LOOP
   KW_POOL
   KW_START


State 62 conflicts: 11 shift/reduce
State 92 conflicts: 11 shift/reduce
State 93 conflicts: 1 shift/reduce
State 109 conflicts: 1 shift/reduce
State 110 conflicts: 1 shift/reduce
State 115 conflicts: 1 shift/reduce
State 122 conflicts: 1 shift/reduce


Grammar

    0 $accept: input $end

    1 input: %empty
    2      | input body

    3 body: KW_LET decl ';'
    4     | KW_CONST decl_const ';'
    5     | func_decl
    6     | commands ';'
    7     | KW_CONST defined_func ";;;;"

    8 defined_func: KW_INT

    9 commands: func_call
   10         | IDENTIFIER ASSIGN expr
   11         | return_expr

   12 type: KW_INT
   13     | KW_REAL
   14     | KW_BOOL
   15     | KW_STRING
   16     | "[]" type

   17 const_type: KW_INT
   18           | KW_REAL
   19           | KW_BOOL
   20           | KW_STRING

   21 func_body: %empty
   22          | KW_LET decl
   23          | commands
   24          | func_body ';' func_body

   25 func_decl: KW_CONST IDENTIFIER ASSIGN '(' func_par_decl ')' ':' type '{' func_body '}'

   26 func_call: IDENTIFIER '(' func_param ')'

   27 func_param: %empty
   28           | func_param ',' func_param
   29           | expr

   30 return_expr: KW_RETURN expr

   31 func_par_decl: %empty
   32              | IDENTIFIER
   33              | IDENTIFIER '[' ']'
   34              | IDENTIFIER '[' ']' ':' type func_par_decl
   35              | IDENTIFIER ':' type func_par_decl
   36              | func_par_decl ',' func_par_decl

   37 data: POSINT
   38     | REAL
   39     | STRING
   40     | KW_TRUE
   41     | KW_FALSE
   42     | ARRAY

   43 decl_const: ',' decl_const
   44           | IDENTIFIER ASSIGN data decl_const
   45           | IDENTIFIER ARRAY ASSIGN data decl_const
   46           | ':' const_type

   47 decl: %empty
   48     | ',' decl
   49     | IDENTIFIER decl
   50     | IDENTIFIER ARRAY decl
   51     | IDENTIFIER ARRAY ASSIGN data decl
   52     | IDENTIFIER ASSIGN data decl
   53     | ':' type

   54 infix_operator: '+'
   55               | '-'
   56               | '*'
   57               | '/'
   58               | '%'
   59               | '='
   60               | '<'
   61               | KW_NOT_EQL
   62               | KW_LESS_EQL
   63               | KW_OR
   64               | KW_AND

   65 prefix_operator: '+'
   66                | '-'
   67                | KW_NOT

   68 expr: POSINT
   69     | REAL
   70     | IDENTIFIER
   71     | IDENTIFIER ARRAY
   72     | func_call
   73     | '(' expr ')'
   74     | expr infix_operator expr
   75     | prefix_operator expr


Terminals, with rules where they appear

$end (0) 0
'%' (37) 58
'(' (40) 25 26 73
')' (41) 25 26 73
'*' (42) 56
'+' (43) 54 65
',' (44) 28 36 43 48
'-' (45) 55 66
'/' (47) 57
':' (58) 25 34 35 46 53
';' (59) 3 4 6 24
'<' (60) 60
'=' (61) 59
'[' (91) 33 34
']' (93) 33 34
'{' (123) 25
'}' (125) 25
error (256)
IDENTIFIER (258) 10 25 26 32 33 34 35 44 45 49 50 51 52 70 71
POSINT (259) 37 68
REAL (260) 38 69
STRING (261) 39
ARRAY (262) 42 45 50 51 71
ASSIGN (263) 10 25 44 45 51 52
KW_INT (264) 8 12 17
KW_REAL (265) 13 18
KW_BOOL (266) 14 19
KW_STRING (267) 15 20
KW_IF (268)
KW_THEN (269)
KW_ELSE (270)
KW_AND (271) 64
KW_OR (272) 63
KW_NOT (273) 67
KW_NOT_EQL (274) 61
KW_LESS_EQL (275) 62
KW_FI (276)
KW_WHILE (277)
KW_LOOP (278)
KW_POOL (279)
KW_CONST (280) 4 7 25
KW_LET (281) 3 22
KW_RETURN (282) 30
KW_START (283)
KW_TRUE (284) 40
KW_FALSE (285) 41
";;;;" (286) 7
"[]" (287) 16


Nonterminals, with rules where they appear

$accept (49)
    on left: 0
input (50)
    on left: 1 2, on right: 0 2
body (51)
    on left: 3 4 5 6 7, on right: 2
defined_func (52)
    on left: 8, on right: 7
commands (53)
    on left: 9 10 11, on right: 6 23
type (54)
    on left: 12 13 14 15 16, on right: 16 25 34 35 53
const_type (55)
    on left: 17 18 19 20, on right: 46
func_body (56)
    on left: 21 22 23 24, on right: 24 25
func_decl (57)
    on left: 25, on right: 5
func_call (58)
    on left: 26, on right: 9 72
func_param (59)
    on left: 27 28 29, on right: 26 28
return_expr (60)
    on left: 30, on right: 11
func_par_decl (61)
    on left: 31 32 33 34 35 36, on right: 25 34 35 36
data (62)
    on left: 37 38 39 40 41 42, on right: 44 45 51 52
decl_const (63)
    on left: 43 44 45 46, on right: 4 43 44 45
decl (64)
    on left: 47 48 49 50 51 52 53, on right: 3 22 48 49 50 51 52
infix_operator (65)
    on left: 54 55 56 57 58 59 60 61 62 63 64, on right: 74
prefix_operator (66)
    on left: 65 66 67, on right: 75
expr (67)
    on left: 68 69 70 71 72 73 74 75, on right: 10 29 30 73 74 75


State 0

    0 $accept: . input $end
    1 input: . %empty
    2      | . input body

    $default  reduce using rule 1 (input)

    input  go to state 1


State 1

    0 $accept: input . $end
    2 input: input . body
    3 body: . KW_LET decl ';'
    4     | . KW_CONST decl_const ';'
    5     | . func_decl
    6     | . commands ';'
    7     | . KW_CONST defined_func ";;;;"
    9 commands: . func_call
   10         | . IDENTIFIER ASSIGN expr
   11         | . return_expr
   25 func_decl: . KW_CONST IDENTIFIER ASSIGN '(' func_par_decl ')' ':' type '{' func_body '}'
   26 func_call: . IDENTIFIER '(' func_param ')'
   30 return_expr: . KW_RETURN expr

    $end        shift, and go to state 2
    IDENTIFIER  shift, and go to state 3
    KW_CONST    shift, and go to state 4
    KW_LET      shift, and go to state 5
    KW_RETURN   shift, and go to state 6

    body         go to state 7
    commands     go to state 8
    func_decl    go to state 9
    func_call    go to state 10
    return_expr  go to state 11


State 2

    0 $accept: input $end .

    $default  accept


State 3

   10 commands: IDENTIFIER . ASSIGN expr
   26 func_call: IDENTIFIER . '(' func_param ')'

    ASSIGN  shift, and go to state 12
    '('     shift, and go to state 13


State 4

    4 body: KW_CONST . decl_const ';'
    7     | KW_CONST . defined_func ";;;;"
    8 defined_func: . KW_INT
   25 func_decl: KW_CONST . IDENTIFIER ASSIGN '(' func_par_decl ')' ':' type '{' func_body '}'
   43 decl_const: . ',' decl_const
   44           | . IDENTIFIER ASSIGN data decl_const
   45           | . IDENTIFIER ARRAY ASSIGN data decl_const
   46           | . ':' const_type

    IDENTIFIER  shift, and go to state 14
    KW_INT      shift, and go to state 15
    ':'         shift, and go to state 16
    ','         shift, and go to state 17

    defined_func  go to state 18
    decl_const    go to state 19


State 5

    3 body: KW_LET . decl ';'
   47 decl: . %empty  [';']
   48     | . ',' decl
   49     | . IDENTIFIER decl
   50     | . IDENTIFIER ARRAY decl
   51     | . IDENTIFIER ARRAY ASSIGN data decl
   52     | . IDENTIFIER ASSIGN data decl
   53     | . ':' type

    IDENTIFIER  shift, and go to state 20
    ':'         shift, and go to state 21
    ','         shift, and go to state 22

    $default  reduce using rule 47 (decl)

    decl  go to state 23


State 6

   26 func_call: . IDENTIFIER '(' func_param ')'
   30 return_expr: KW_RETURN . expr
   65 prefix_operator: . '+'
   66                | . '-'
   67                | . KW_NOT
   68 expr: . POSINT
   69     | . REAL
   70     | . IDENTIFIER
   71     | . IDENTIFIER ARRAY
   72     | . func_call
   73     | . '(' expr ')'
   74     | . expr infix_operator expr
   75     | . prefix_operator expr

    IDENTIFIER  shift, and go to state 24
    POSINT      shift, and go to state 25
    REAL        shift, and go to state 26
    KW_NOT      shift, and go to state 27
    '-'         shift, and go to state 28
    '+'         shift, and go to state 29
    '('         shift, and go to state 30

    func_call        go to state 31
    prefix_operator  go to state 32
    expr             go to state 33


State 7

    2 input: input body .

    $default  reduce using rule 2 (input)


State 8

    6 body: commands . ';'

    ';'  shift, and go to state 34


State 9

    5 body: func_decl .

    $default  reduce using rule 5 (body)


State 10

    9 commands: func_call .

    $default  reduce using rule 9 (commands)


State 11

   11 commands: return_expr .

    $default  reduce using rule 11 (commands)


State 12

   10 commands: IDENTIFIER ASSIGN . expr
   26 func_call: . IDENTIFIER '(' func_param ')'
   65 prefix_operator: . '+'
   66                | . '-'
   67                | . KW_NOT
   68 expr: . POSINT
   69     | . REAL
   70     | . IDENTIFIER
   71     | . IDENTIFIER ARRAY
   72     | . func_call
   73     | . '(' expr ')'
   74     | . expr infix_operator expr
   75     | . prefix_operator expr

    IDENTIFIER  shift, and go to state 24
    POSINT      shift, and go to state 25
    REAL        shift, and go to state 26
    KW_NOT      shift, and go to state 27
    '-'         shift, and go to state 28
    '+'         shift, and go to state 29
    '('         shift, and go to state 30

    func_call        go to state 31
    prefix_operator  go to state 32
    expr             go to state 35


State 13

   26 func_call: . IDENTIFIER '(' func_param ')'
   26          | IDENTIFIER '(' . func_param ')'
   27 func_param: . %empty  [')', ',']
   28           | . func_param ',' func_param
   29           | . expr
   65 prefix_operator: . '+'
   66                | . '-'
   67                | . KW_NOT
   68 expr: . POSINT
   69     | . REAL
   70     | . IDENTIFIER
   71     | . IDENTIFIER ARRAY
   72     | . func_call
   73     | . '(' expr ')'
   74     | . expr infix_operator expr
   75     | . prefix_operator expr

    IDENTIFIER  shift, and go to state 24
    POSINT      shift, and go to state 25
    REAL        shift, and go to state 26
    KW_NOT      shift, and go to state 27
    '-'         shift, and go to state 28
    '+'         shift, and go to state 29
    '('         shift, and go to state 30

    $default  reduce using rule 27 (func_param)

    func_call        go to state 31
    func_param       go to state 36
    prefix_operator  go to state 32
    expr             go to state 37


State 14

   25 func_decl: KW_CONST IDENTIFIER . ASSIGN '(' func_par_decl ')' ':' type '{' func_body '}'
   44 decl_const: IDENTIFIER . ASSIGN data decl_const
   45           | IDENTIFIER . ARRAY ASSIGN data decl_const

    ARRAY   shift, and go to state 38
    ASSIGN  shift, and go to state 39


State 15

    8 defined_func: KW_INT .

    $default  reduce using rule 8 (defined_func)


State 16

   17 const_type: . KW_INT
   18           | . KW_REAL
   19           | . KW_BOOL
   20           | . KW_STRING
   46 decl_const: ':' . const_type

    KW_INT     shift, and go to state 40
    KW_REAL    shift, and go to state 41
    KW_BOOL    shift, and go to state 42
    KW_STRING  shift, and go to state 43

    const_type  go to state 44


State 17

   43 decl_const: . ',' decl_const
   43           | ',' . decl_const
   44           | . IDENTIFIER ASSIGN data decl_const
   45           | . IDENTIFIER ARRAY ASSIGN data decl_const
   46           | . ':' const_type

    IDENTIFIER  shift, and go to state 45
    ':'         shift, and go to state 16
    ','         shift, and go to state 17

    decl_const  go to state 46


State 18

    7 body: KW_CONST defined_func . ";;;;"

    ";;;;"  shift, and go to state 47


State 19

    4 body: KW_CONST decl_const . ';'

    ';'  shift, and go to state 48


State 20

   47 decl: . %empty  [';', '}']
   48     | . ',' decl
   49     | . IDENTIFIER decl
   49     | IDENTIFIER . decl
   50     | . IDENTIFIER ARRAY decl
   50     | IDENTIFIER . ARRAY decl
   51     | . IDENTIFIER ARRAY ASSIGN data decl
   51     | IDENTIFIER . ARRAY ASSIGN data decl
   52     | . IDENTIFIER ASSIGN data decl
   52     | IDENTIFIER . ASSIGN data decl
   53     | . ':' type

    IDENTIFIER  shift, and go to state 20
    ARRAY       shift, and go to state 49
    ASSIGN      shift, and go to state 50
    ':'         shift, and go to state 21
    ','         shift, and go to state 22

    $default  reduce using rule 47 (decl)

    decl  go to state 51


State 21

   12 type: . KW_INT
   13     | . KW_REAL
   14     | . KW_BOOL
   15     | . KW_STRING
   16     | . "[]" type
   53 decl: ':' . type

    KW_INT     shift, and go to state 52
    KW_REAL    shift, and go to state 53
    KW_BOOL    shift, and go to state 54
    KW_STRING  shift, and go to state 55
    "[]"       shift, and go to state 56

    type  go to state 57


State 22

   47 decl: . %empty  [';', '}']
   48     | . ',' decl
   48     | ',' . decl
   49     | . IDENTIFIER decl
   50     | . IDENTIFIER ARRAY decl
   51     | . IDENTIFIER ARRAY ASSIGN data decl
   52     | . IDENTIFIER ASSIGN data decl
   53     | . ':' type

    IDENTIFIER  shift, and go to state 20
    ':'         shift, and go to state 21
    ','         shift, and go to state 22

    $default  reduce using rule 47 (decl)

    decl  go to state 58


State 23

    3 body: KW_LET decl . ';'

    ';'  shift, and go to state 59


State 24

   26 func_call: IDENTIFIER . '(' func_param ')'
   70 expr: IDENTIFIER .  [KW_AND, KW_OR, KW_NOT_EQL, KW_LESS_EQL, '=', '<', '-', '+', '*', '/', '%', ';', ')', '}', ',']
   71     | IDENTIFIER . ARRAY

    ARRAY  shift, and go to state 60
    '('    shift, and go to state 13

    $default  reduce using rule 70 (expr)


State 25

   68 expr: POSINT .

    $default  reduce using rule 68 (expr)


State 26

   69 expr: REAL .

    $default  reduce using rule 69 (expr)


State 27

   67 prefix_operator: KW_NOT .

    $default  reduce using rule 67 (prefix_operator)


State 28

   66 prefix_operator: '-' .

    $default  reduce using rule 66 (prefix_operator)


State 29

   65 prefix_operator: '+' .

    $default  reduce using rule 65 (prefix_operator)


State 30

   26 func_call: . IDENTIFIER '(' func_param ')'
   65 prefix_operator: . '+'
   66                | . '-'
   67                | . KW_NOT
   68 expr: . POSINT
   69     | . REAL
   70     | . IDENTIFIER
   71     | . IDENTIFIER ARRAY
   72     | . func_call
   73     | . '(' expr ')'
   73     | '(' . expr ')'
   74     | . expr infix_operator expr
   75     | . prefix_operator expr

    IDENTIFIER  shift, and go to state 24
    POSINT      shift, and go to state 25
    REAL        shift, and go to state 26
    KW_NOT      shift, and go to state 27
    '-'         shift, and go to state 28
    '+'         shift, and go to state 29
    '('         shift, and go to state 30

    func_call        go to state 31
    prefix_operator  go to state 32
    expr             go to state 61


State 31

   72 expr: func_call .

    $default  reduce using rule 72 (expr)


State 32

   26 func_call: . IDENTIFIER '(' func_param ')'
   65 prefix_operator: . '+'
   66                | . '-'
   67                | . KW_NOT
   68 expr: . POSINT
   69     | . REAL
   70     | . IDENTIFIER
   71     | . IDENTIFIER ARRAY
   72     | . func_call
   73     | . '(' expr ')'
   74     | . expr infix_operator expr
   75     | . prefix_operator expr
   75     | prefix_operator . expr

    IDENTIFIER  shift, and go to state 24
    POSINT      shift, and go to state 25
    REAL        shift, and go to state 26
    KW_NOT      shift, and go to state 27
    '-'         shift, and go to state 28
    '+'         shift, and go to state 29
    '('         shift, and go to state 30

    func_call        go to state 31
    prefix_operator  go to state 32
    expr             go to state 62


State 33

   30 return_expr: KW_RETURN expr .  [';', '}']
   54 infix_operator: . '+'
   55               | . '-'
   56               | . '*'
   57               | . '/'
   58               | . '%'
   59               | . '='
   60               | . '<'
   61               | . KW_NOT_EQL
   62               | . KW_LESS_EQL
   63               | . KW_OR
   64               | . KW_AND
   74 expr: expr . infix_operator expr

    KW_AND       shift, and go to state 63
    KW_OR        shift, and go to state 64
    KW_NOT_EQL   shift, and go to state 65
    KW_LESS_EQL  shift, and go to state 66
    '='          shift, and go to state 67
    '<'          shift, and go to state 68
    '-'          shift, and go to state 69
    '+'          shift, and go to state 70
    '*'          shift, and go to state 71
    '/'          shift, and go to state 72
    '%'          shift, and go to state 73

    $default  reduce using rule 30 (return_expr)

    infix_operator  go to state 74


State 34

    6 body: commands ';' .

    $default  reduce using rule 6 (body)


State 35

   10 commands: IDENTIFIER ASSIGN expr .  [';', '}']
   54 infix_operator: . '+'
   55               | . '-'
   56               | . '*'
   57               | . '/'
   58               | . '%'
   59               | . '='
   60               | . '<'
   61               | . KW_NOT_EQL
   62               | . KW_LESS_EQL
   63               | . KW_OR
   64               | . KW_AND
   74 expr: expr . infix_operator expr

    KW_AND       shift, and go to state 63
    KW_OR        shift, and go to state 64
    KW_NOT_EQL   shift, and go to state 65
    KW_LESS_EQL  shift, and go to state 66
    '='          shift, and go to state 67
    '<'          shift, and go to state 68
    '-'          shift, and go to state 69
    '+'          shift, and go to state 70
    '*'          shift, and go to state 71
    '/'          shift, and go to state 72
    '%'          shift, and go to state 73

    $default  reduce using rule 10 (commands)

    infix_operator  go to state 74


State 36

   26 func_call: IDENTIFIER '(' func_param . ')'
   28 func_param: func_param . ',' func_param

    ')'  shift, and go to state 75
    ','  shift, and go to state 76


State 37

   29 func_param: expr .  [')', ',']
   54 infix_operator: . '+'
   55               | . '-'
   56               | . '*'
   57               | . '/'
   58               | . '%'
   59               | . '='
   60               | . '<'
   61               | . KW_NOT_EQL
   62               | . KW_LESS_EQL
   63               | . KW_OR
   64               | . KW_AND
   74 expr: expr . infix_operator expr

    KW_AND       shift, and go to state 63
    KW_OR        shift, and go to state 64
    KW_NOT_EQL   shift, and go to state 65
    KW_LESS_EQL  shift, and go to state 66
    '='          shift, and go to state 67
    '<'          shift, and go to state 68
    '-'          shift, and go to state 69
    '+'          shift, and go to state 70
    '*'          shift, and go to state 71
    '/'          shift, and go to state 72
    '%'          shift, and go to state 73

    $default  reduce using rule 29 (func_param)

    infix_operator  go to state 74


State 38

   45 decl_const: IDENTIFIER ARRAY . ASSIGN data decl_const

    ASSIGN  shift, and go to state 77


State 39

   25 func_decl: KW_CONST IDENTIFIER ASSIGN . '(' func_par_decl ')' ':' type '{' func_body '}'
   37 data: . POSINT
   38     | . REAL
   39     | . STRING
   40     | . KW_TRUE
   41     | . KW_FALSE
   42     | . ARRAY
   44 decl_const: IDENTIFIER ASSIGN . data decl_const

    POSINT    shift, and go to state 78
    REAL      shift, and go to state 79
    STRING    shift, and go to state 80
    ARRAY     shift, and go to state 81
    KW_TRUE   shift, and go to state 82
    KW_FALSE  shift, and go to state 83
    '('       shift, and go to state 84

    data  go to state 85


State 40

   17 const_type: KW_INT .

    $default  reduce using rule 17 (const_type)


State 41

   18 const_type: KW_REAL .

    $default  reduce using rule 18 (const_type)


State 42

   19 const_type: KW_BOOL .

    $default  reduce using rule 19 (const_type)


State 43

   20 const_type: KW_STRING .

    $default  reduce using rule 20 (const_type)


State 44

   46 decl_const: ':' const_type .

    $default  reduce using rule 46 (decl_const)


State 45

   44 decl_const: IDENTIFIER . ASSIGN data decl_const
   45           | IDENTIFIER . ARRAY ASSIGN data decl_const

    ARRAY   shift, and go to state 38
    ASSIGN  shift, and go to state 86


State 46

   43 decl_const: ',' decl_const .

    $default  reduce using rule 43 (decl_const)


State 47

    7 body: KW_CONST defined_func ";;;;" .

    $default  reduce using rule 7 (body)


State 48

    4 body: KW_CONST decl_const ';' .

    $default  reduce using rule 4 (body)


State 49

   47 decl: . %empty  [';', '}']
   48     | . ',' decl
   49     | . IDENTIFIER decl
   50     | . IDENTIFIER ARRAY decl
   50     | IDENTIFIER ARRAY . decl
   51     | . IDENTIFIER ARRAY ASSIGN data decl
   51     | IDENTIFIER ARRAY . ASSIGN data decl
   52     | . IDENTIFIER ASSIGN data decl
   53     | . ':' type

    IDENTIFIER  shift, and go to state 20
    ASSIGN      shift, and go to state 87
    ':'         shift, and go to state 21
    ','         shift, and go to state 22

    $default  reduce using rule 47 (decl)

    decl  go to state 88


State 50

   37 data: . POSINT
   38     | . REAL
   39     | . STRING
   40     | . KW_TRUE
   41     | . KW_FALSE
   42     | . ARRAY
   52 decl: IDENTIFIER ASSIGN . data decl

    POSINT    shift, and go to state 78
    REAL      shift, and go to state 79
    STRING    shift, and go to state 80
    ARRAY     shift, and go to state 81
    KW_TRUE   shift, and go to state 82
    KW_FALSE  shift, and go to state 83

    data  go to state 89


State 51

   49 decl: IDENTIFIER decl .

    $default  reduce using rule 49 (decl)


State 52

   12 type: KW_INT .

    $default  reduce using rule 12 (type)


State 53

   13 type: KW_REAL .

    $default  reduce using rule 13 (type)


State 54

   14 type: KW_BOOL .

    $default  reduce using rule 14 (type)


State 55

   15 type: KW_STRING .

    $default  reduce using rule 15 (type)


State 56

   12 type: . KW_INT
   13     | . KW_REAL
   14     | . KW_BOOL
   15     | . KW_STRING
   16     | . "[]" type
   16     | "[]" . type

    KW_INT     shift, and go to state 52
    KW_REAL    shift, and go to state 53
    KW_BOOL    shift, and go to state 54
    KW_STRING  shift, and go to state 55
    "[]"       shift, and go to state 56

    type  go to state 90


State 57

   53 decl: ':' type .

    $default  reduce using rule 53 (decl)


State 58

   48 decl: ',' decl .

    $default  reduce using rule 48 (decl)


State 59

    3 body: KW_LET decl ';' .

    $default  reduce using rule 3 (body)


State 60

   71 expr: IDENTIFIER ARRAY .

    $default  reduce using rule 71 (expr)


State 61

   54 infix_operator: . '+'
   55               | . '-'
   56               | . '*'
   57               | . '/'
   58               | . '%'
   59               | . '='
   60               | . '<'
   61               | . KW_NOT_EQL
   62               | . KW_LESS_EQL
   63               | . KW_OR
   64               | . KW_AND
   73 expr: '(' expr . ')'
   74     | expr . infix_operator expr

    KW_AND       shift, and go to state 63
    KW_OR        shift, and go to state 64
    KW_NOT_EQL   shift, and go to state 65
    KW_LESS_EQL  shift, and go to state 66
    '='          shift, and go to state 67
    '<'          shift, and go to state 68
    '-'          shift, and go to state 69
    '+'          shift, and go to state 70
    '*'          shift, and go to state 71
    '/'          shift, and go to state 72
    '%'          shift, and go to state 73
    ')'          shift, and go to state 91

    infix_operator  go to state 74


State 62

   54 infix_operator: . '+'
   55               | . '-'
   56               | . '*'
   57               | . '/'
   58               | . '%'
   59               | . '='
   60               | . '<'
   61               | . KW_NOT_EQL
   62               | . KW_LESS_EQL
   63               | . KW_OR
   64               | . KW_AND
   74 expr: expr . infix_operator expr
   75     | prefix_operator expr .  [KW_AND, KW_OR, KW_NOT_EQL, KW_LESS_EQL, '=', '<', '-', '+', '*', '/', '%', ';', ')', '}', ',']

    KW_AND       shift, and go to state 63
    KW_OR        shift, and go to state 64
    KW_NOT_EQL   shift, and go to state 65
    KW_LESS_EQL  shift, and go to state 66
    '='          shift, and go to state 67
    '<'          shift, and go to state 68
    '-'          shift, and go to state 69
    '+'          shift, and go to state 70
    '*'          shift, and go to state 71
    '/'          shift, and go to state 72
    '%'          shift, and go to state 73

    KW_AND       [reduce using rule 75 (expr)]
    KW_OR        [reduce using rule 75 (expr)]
    KW_NOT_EQL   [reduce using rule 75 (expr)]
    KW_LESS_EQL  [reduce using rule 75 (expr)]
    '='          [reduce using rule 75 (expr)]
    '<'          [reduce using rule 75 (expr)]
    '-'          [reduce using rule 75 (expr)]
    '+'          [reduce using rule 75 (expr)]
    '*'          [reduce using rule 75 (expr)]
    '/'          [reduce using rule 75 (expr)]
    '%'          [reduce using rule 75 (expr)]
    $default     reduce using rule 75 (expr)

    infix_operator  go to state 74


State 63

   64 infix_operator: KW_AND .

    $default  reduce using rule 64 (infix_operator)


State 64

   63 infix_operator: KW_OR .

    $default  reduce using rule 63 (infix_operator)


State 65

   61 infix_operator: KW_NOT_EQL .

    $default  reduce using rule 61 (infix_operator)


State 66

   62 infix_operator: KW_LESS_EQL .

    $default  reduce using rule 62 (infix_operator)


State 67

   59 infix_operator: '=' .

    $default  reduce using rule 59 (infix_operator)


State 68

   60 infix_operator: '<' .

    $default  reduce using rule 60 (infix_operator)


State 69

   55 infix_operator: '-' .

    $default  reduce using rule 55 (infix_operator)


State 70

   54 infix_operator: '+' .

    $default  reduce using rule 54 (infix_operator)


State 71

   56 infix_operator: '*' .

    $default  reduce using rule 56 (infix_operator)


State 72

   57 infix_operator: '/' .

    $default  reduce using rule 57 (infix_operator)


State 73

   58 infix_operator: '%' .

    $default  reduce using rule 58 (infix_operator)


State 74

   26 func_call: . IDENTIFIER '(' func_param ')'
   65 prefix_operator: . '+'
   66                | . '-'
   67                | . KW_NOT
   68 expr: . POSINT
   69     | . REAL
   70     | . IDENTIFIER
   71     | . IDENTIFIER ARRAY
   72     | . func_call
   73     | . '(' expr ')'
   74     | . expr infix_operator expr
   74     | expr infix_operator . expr
   75     | . prefix_operator expr

    IDENTIFIER  shift, and go to state 24
    POSINT      shift, and go to state 25
    REAL        shift, and go to state 26
    KW_NOT      shift, and go to state 27
    '-'         shift, and go to state 28
    '+'         shift, and go to state 29
    '('         shift, and go to state 30

    func_call        go to state 31
    prefix_operator  go to state 32
    expr             go to state 92


State 75

   26 func_call: IDENTIFIER '(' func_param ')' .

    $default  reduce using rule 26 (func_call)


State 76

   26 func_call: . IDENTIFIER '(' func_param ')'
   27 func_param: . %empty  [')', ',']
   28           | . func_param ',' func_param
   28           | func_param ',' . func_param
   29           | . expr
   65 prefix_operator: . '+'
   66                | . '-'
   67                | . KW_NOT
   68 expr: . POSINT
   69     | . REAL
   70     | . IDENTIFIER
   71     | . IDENTIFIER ARRAY
   72     | . func_call
   73     | . '(' expr ')'
   74     | . expr infix_operator expr
   75     | . prefix_operator expr

    IDENTIFIER  shift, and go to state 24
    POSINT      shift, and go to state 25
    REAL        shift, and go to state 26
    KW_NOT      shift, and go to state 27
    '-'         shift, and go to state 28
    '+'         shift, and go to state 29
    '('         shift, and go to state 30

    $default  reduce using rule 27 (func_param)

    func_call        go to state 31
    func_param       go to state 93
    prefix_operator  go to state 32
    expr             go to state 37


State 77

   37 data: . POSINT
   38     | . REAL
   39     | . STRING
   40     | . KW_TRUE
   41     | . KW_FALSE
   42     | . ARRAY
   45 decl_const: IDENTIFIER ARRAY ASSIGN . data decl_const

    POSINT    shift, and go to state 78
    REAL      shift, and go to state 79
    STRING    shift, and go to state 80
    ARRAY     shift, and go to state 81
    KW_TRUE   shift, and go to state 82
    KW_FALSE  shift, and go to state 83

    data  go to state 94


State 78

   37 data: POSINT .

    $default  reduce using rule 37 (data)


State 79

   38 data: REAL .

    $default  reduce using rule 38 (data)


State 80

   39 data: STRING .

    $default  reduce using rule 39 (data)


State 81

   42 data: ARRAY .

    $default  reduce using rule 42 (data)


State 82

   40 data: KW_TRUE .

    $default  reduce using rule 40 (data)


State 83

   41 data: KW_FALSE .

    $default  reduce using rule 41 (data)


State 84

   25 func_decl: KW_CONST IDENTIFIER ASSIGN '(' . func_par_decl ')' ':' type '{' func_body '}'
   31 func_par_decl: . %empty  [')', ',']
   32              | . IDENTIFIER
   33              | . IDENTIFIER '[' ']'
   34              | . IDENTIFIER '[' ']' ':' type func_par_decl
   35              | . IDENTIFIER ':' type func_par_decl
   36              | . func_par_decl ',' func_par_decl

    IDENTIFIER  shift, and go to state 95

    $default  reduce using rule 31 (func_par_decl)

    func_par_decl  go to state 96


State 85

   43 decl_const: . ',' decl_const
   44           | . IDENTIFIER ASSIGN data decl_const
   44           | IDENTIFIER ASSIGN data . decl_const
   45           | . IDENTIFIER ARRAY ASSIGN data decl_const
   46           | . ':' const_type

    IDENTIFIER  shift, and go to state 45
    ':'         shift, and go to state 16
    ','         shift, and go to state 17

    decl_const  go to state 97


State 86

   37 data: . POSINT
   38     | . REAL
   39     | . STRING
   40     | . KW_TRUE
   41     | . KW_FALSE
   42     | . ARRAY
   44 decl_const: IDENTIFIER ASSIGN . data decl_const

    POSINT    shift, and go to state 78
    REAL      shift, and go to state 79
    STRING    shift, and go to state 80
    ARRAY     shift, and go to state 81
    KW_TRUE   shift, and go to state 82
    KW_FALSE  shift, and go to state 83

    data  go to state 85


State 87

   37 data: . POSINT
   38     | . REAL
   39     | . STRING
   40     | . KW_TRUE
   41     | . KW_FALSE
   42     | . ARRAY
   51 decl: IDENTIFIER ARRAY ASSIGN . data decl

    POSINT    shift, and go to state 78
    REAL      shift, and go to state 79
    STRING    shift, and go to state 80
    ARRAY     shift, and go to state 81
    KW_TRUE   shift, and go to state 82
    KW_FALSE  shift, and go to state 83

    data  go to state 98


State 88

   50 decl: IDENTIFIER ARRAY decl .

    $default  reduce using rule 50 (decl)


State 89

   47 decl: . %empty  [';', '}']
   48     | . ',' decl
   49     | . IDENTIFIER decl
   50     | . IDENTIFIER ARRAY decl
   51     | . IDENTIFIER ARRAY ASSIGN data decl
   52     | . IDENTIFIER ASSIGN data decl
   52     | IDENTIFIER ASSIGN data . decl
   53     | . ':' type

    IDENTIFIER  shift, and go to state 20
    ':'         shift, and go to state 21
    ','         shift, and go to state 22

    $default  reduce using rule 47 (decl)

    decl  go to state 99


State 90

   16 type: "[]" type .

    $default  reduce using rule 16 (type)


State 91

   73 expr: '(' expr ')' .

    $default  reduce using rule 73 (expr)


State 92

   54 infix_operator: . '+'
   55               | . '-'
   56               | . '*'
   57               | . '/'
   58               | . '%'
   59               | . '='
   60               | . '<'
   61               | . KW_NOT_EQL
   62               | . KW_LESS_EQL
   63               | . KW_OR
   64               | . KW_AND
   74 expr: expr . infix_operator expr
   74     | expr infix_operator expr .  [KW_AND, KW_OR, KW_NOT_EQL, KW_LESS_EQL, '=', '<', '-', '+', '*', '/', '%', ';', ')', '}', ',']

    KW_AND       shift, and go to state 63
    KW_OR        shift, and go to state 64
    KW_NOT_EQL   shift, and go to state 65
    KW_LESS_EQL  shift, and go to state 66
    '='          shift, and go to state 67
    '<'          shift, and go to state 68
    '-'          shift, and go to state 69
    '+'          shift, and go to state 70
    '*'          shift, and go to state 71
    '/'          shift, and go to state 72
    '%'          shift, and go to state 73

    KW_AND       [reduce using rule 74 (expr)]
    KW_OR        [reduce using rule 74 (expr)]
    KW_NOT_EQL   [reduce using rule 74 (expr)]
    KW_LESS_EQL  [reduce using rule 74 (expr)]
    '='          [reduce using rule 74 (expr)]
    '<'          [reduce using rule 74 (expr)]
    '-'          [reduce using rule 74 (expr)]
    '+'          [reduce using rule 74 (expr)]
    '*'          [reduce using rule 74 (expr)]
    '/'          [reduce using rule 74 (expr)]
    '%'          [reduce using rule 74 (expr)]
    $default     reduce using rule 74 (expr)

    infix_operator  go to state 74


State 93

   28 func_param: func_param . ',' func_param
   28           | func_param ',' func_param .  [')', ',']

    ','  shift, and go to state 76

    ','       [reduce using rule 28 (func_param)]
    $default  reduce using rule 28 (func_param)


State 94

   43 decl_const: . ',' decl_const
   44           | . IDENTIFIER ASSIGN data decl_const
   45           | . IDENTIFIER ARRAY ASSIGN data decl_const
   45           | IDENTIFIER ARRAY ASSIGN data . decl_const
   46           | . ':' const_type

    IDENTIFIER  shift, and go to state 45
    ':'         shift, and go to state 16
    ','         shift, and go to state 17

    decl_const  go to state 100


State 95

   32 func_par_decl: IDENTIFIER .  [')', ',']
   33              | IDENTIFIER . '[' ']'
   34              | IDENTIFIER . '[' ']' ':' type func_par_decl
   35              | IDENTIFIER . ':' type func_par_decl

    ':'  shift, and go to state 101
    '['  shift, and go to state 102

    $default  reduce using rule 32 (func_par_decl)


State 96

   25 func_decl: KW_CONST IDENTIFIER ASSIGN '(' func_par_decl . ')' ':' type '{' func_body '}'
   36 func_par_decl: func_par_decl . ',' func_par_decl

    ')'  shift, and go to state 103
    ','  shift, and go to state 104


State 97

   44 decl_const: IDENTIFIER ASSIGN data decl_const .

    $default  reduce using rule 44 (decl_const)


State 98

   47 decl: . %empty  [';', '}']
   48     | . ',' decl
   49     | . IDENTIFIER decl
   50     | . IDENTIFIER ARRAY decl
   51     | . IDENTIFIER ARRAY ASSIGN data decl
   51     | IDENTIFIER ARRAY ASSIGN data . decl
   52     | . IDENTIFIER ASSIGN data decl
   53     | . ':' type

    IDENTIFIER  shift, and go to state 20
    ':'         shift, and go to state 21
    ','         shift, and go to state 22

    $default  reduce using rule 47 (decl)

    decl  go to state 105


State 99

   52 decl: IDENTIFIER ASSIGN data decl .

    $default  reduce using rule 52 (decl)


State 100

   45 decl_const: IDENTIFIER ARRAY ASSIGN data decl_const .

    $default  reduce using rule 45 (decl_const)


State 101

   12 type: . KW_INT
   13     | . KW_REAL
   14     | . KW_BOOL
   15     | . KW_STRING
   16     | . "[]" type
   35 func_par_decl: IDENTIFIER ':' . type func_par_decl

    KW_INT     shift, and go to state 52
    KW_REAL    shift, and go to state 53
    KW_BOOL    shift, and go to state 54
    KW_STRING  shift, and go to state 55
    "[]"       shift, and go to state 56

    type  go to state 106


State 102

   33 func_par_decl: IDENTIFIER '[' . ']'
   34              | IDENTIFIER '[' . ']' ':' type func_par_decl

    ']'  shift, and go to state 107


State 103

   25 func_decl: KW_CONST IDENTIFIER ASSIGN '(' func_par_decl ')' . ':' type '{' func_body '}'

    ':'  shift, and go to state 108


State 104

   31 func_par_decl: . %empty  [')', ',']
   32              | . IDENTIFIER
   33              | . IDENTIFIER '[' ']'
   34              | . IDENTIFIER '[' ']' ':' type func_par_decl
   35              | . IDENTIFIER ':' type func_par_decl
   36              | . func_par_decl ',' func_par_decl
   36              | func_par_decl ',' . func_par_decl

    IDENTIFIER  shift, and go to state 95

    $default  reduce using rule 31 (func_par_decl)

    func_par_decl  go to state 109


State 105

   51 decl: IDENTIFIER ARRAY ASSIGN data decl .

    $default  reduce using rule 51 (decl)


State 106

   31 func_par_decl: . %empty  [')', ',']
   32              | . IDENTIFIER
   33              | . IDENTIFIER '[' ']'
   34              | . IDENTIFIER '[' ']' ':' type func_par_decl
   35              | . IDENTIFIER ':' type func_par_decl
   35              | IDENTIFIER ':' type . func_par_decl
   36              | . func_par_decl ',' func_par_decl

    IDENTIFIER  shift, and go to state 95

    $default  reduce using rule 31 (func_par_decl)

    func_par_decl  go to state 110


State 107

   33 func_par_decl: IDENTIFIER '[' ']' .  [')', ',']
   34              | IDENTIFIER '[' ']' . ':' type func_par_decl

    ':'  shift, and go to state 111

    $default  reduce using rule 33 (func_par_decl)


State 108

   12 type: . KW_INT
   13     | . KW_REAL
   14     | . KW_BOOL
   15     | . KW_STRING
   16     | . "[]" type
   25 func_decl: KW_CONST IDENTIFIER ASSIGN '(' func_par_decl ')' ':' . type '{' func_body '}'

    KW_INT     shift, and go to state 52
    KW_REAL    shift, and go to state 53
    KW_BOOL    shift, and go to state 54
    KW_STRING  shift, and go to state 55
    "[]"       shift, and go to state 56

    type  go to state 112


State 109

   36 func_par_decl: func_par_decl . ',' func_par_decl
   36              | func_par_decl ',' func_par_decl .  [')', ',']

    ','  shift, and go to state 104

    ','       [reduce using rule 36 (func_par_decl)]
    $default  reduce using rule 36 (func_par_decl)


State 110

   35 func_par_decl: IDENTIFIER ':' type func_par_decl .  [')', ',']
   36              | func_par_decl . ',' func_par_decl

    ','  shift, and go to state 104

    ','       [reduce using rule 35 (func_par_decl)]
    $default  reduce using rule 35 (func_par_decl)


State 111

   12 type: . KW_INT
   13     | . KW_REAL
   14     | . KW_BOOL
   15     | . KW_STRING
   16     | . "[]" type
   34 func_par_decl: IDENTIFIER '[' ']' ':' . type func_par_decl

    KW_INT     shift, and go to state 52
    KW_REAL    shift, and go to state 53
    KW_BOOL    shift, and go to state 54
    KW_STRING  shift, and go to state 55
    "[]"       shift, and go to state 56

    type  go to state 113


State 112

   25 func_decl: KW_CONST IDENTIFIER ASSIGN '(' func_par_decl ')' ':' type . '{' func_body '}'

    '{'  shift, and go to state 114


State 113

   31 func_par_decl: . %empty  [')', ',']
   32              | . IDENTIFIER
   33              | . IDENTIFIER '[' ']'
   34              | . IDENTIFIER '[' ']' ':' type func_par_decl
   34              | IDENTIFIER '[' ']' ':' type . func_par_decl
   35              | . IDENTIFIER ':' type func_par_decl
   36              | . func_par_decl ',' func_par_decl

    IDENTIFIER  shift, and go to state 95

    $default  reduce using rule 31 (func_par_decl)

    func_par_decl  go to state 115


State 114

    9 commands: . func_call
   10         | . IDENTIFIER ASSIGN expr
   11         | . return_expr
   21 func_body: . %empty  [';', '}']
   22          | . KW_LET decl
   23          | . commands
   24          | . func_body ';' func_body
   25 func_decl: KW_CONST IDENTIFIER ASSIGN '(' func_par_decl ')' ':' type '{' . func_body '}'
   26 func_call: . IDENTIFIER '(' func_param ')'
   30 return_expr: . KW_RETURN expr

    IDENTIFIER  shift, and go to state 3
    KW_LET      shift, and go to state 116
    KW_RETURN   shift, and go to state 6

    $default  reduce using rule 21 (func_body)

    commands     go to state 117
    func_body    go to state 118
    func_call    go to state 10
    return_expr  go to state 11


State 115

   34 func_par_decl: IDENTIFIER '[' ']' ':' type func_par_decl .  [')', ',']
   36              | func_par_decl . ',' func_par_decl

    ','  shift, and go to state 104

    ','       [reduce using rule 34 (func_par_decl)]
    $default  reduce using rule 34 (func_par_decl)


State 116

   22 func_body: KW_LET . decl
   47 decl: . %empty  [';', '}']
   48     | . ',' decl
   49     | . IDENTIFIER decl
   50     | . IDENTIFIER ARRAY decl
   51     | . IDENTIFIER ARRAY ASSIGN data decl
   52     | . IDENTIFIER ASSIGN data decl
   53     | . ':' type

    IDENTIFIER  shift, and go to state 20
    ':'         shift, and go to state 21
    ','         shift, and go to state 22

    $default  reduce using rule 47 (decl)

    decl  go to state 119


State 117

   23 func_body: commands .

    $default  reduce using rule 23 (func_body)


State 118

   24 func_body: func_body . ';' func_body
   25 func_decl: KW_CONST IDENTIFIER ASSIGN '(' func_par_decl ')' ':' type '{' func_body . '}'

    ';'  shift, and go to state 120
    '}'  shift, and go to state 121


State 119

   22 func_body: KW_LET decl .

    $default  reduce using rule 22 (func_body)


State 120

    9 commands: . func_call
   10         | . IDENTIFIER ASSIGN expr
   11         | . return_expr
   21 func_body: . %empty  [';', '}']
   22          | . KW_LET decl
   23          | . commands
   24          | . func_body ';' func_body
   24          | func_body ';' . func_body
   26 func_call: . IDENTIFIER '(' func_param ')'
   30 return_expr: . KW_RETURN expr

    IDENTIFIER  shift, and go to state 3
    KW_LET      shift, and go to state 116
    KW_RETURN   shift, and go to state 6

    $default  reduce using rule 21 (func_body)

    commands     go to state 117
    func_body    go to state 122
    func_call    go to state 10
    return_expr  go to state 11


State 121

   25 func_decl: KW_CONST IDENTIFIER ASSIGN '(' func_par_decl ')' ':' type '{' func_body '}' .

    $default  reduce using rule 25 (func_decl)


State 122

   24 func_body: func_body . ';' func_body
   24          | func_body ';' func_body .  [';', '}']

    ';'  shift, and go to state 120

    ';'       [reduce using rule 24 (func_body)]
    $default  reduce using rule 24 (func_body)
