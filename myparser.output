Terminals unused in grammar

   KW_START


State 53 conflicts: 11 shift/reduce
State 95 conflicts: 11 shift/reduce
State 112 conflicts: 1 shift/reduce
State 130 conflicts: 1 shift/reduce
State 131 conflicts: 1 shift/reduce
State 136 conflicts: 1 shift/reduce


Grammar

    0 $accept: input $end

    1 input: %empty
    2      | input body

    3 body: KW_LET decl ';'
    4     | KW_CONST decl_const ';'
    5     | func_decl
    6     | commands
    7     | KW_CONST defined_func ";;;;"

    8 defined_func: KW_INT

    9 commands: func_call ';'
   10         | IDENTIFIER ASSIGN expr ';'
   11         | return_expr ';'
   12         | KW_IF if_state KW_FI
   13         | KW_WHILE expr KW_LOOP while_state KW_POOL

   14 while_state: commands
   15            | commands while_state

   16 if_state: %empty
   17         | expr KW_THEN if_state
   18         | commands if_state
   19         | KW_ELSE if_state

   20 type: KW_INT
   21     | KW_REAL
   22     | KW_BOOL
   23     | KW_STRING
   24     | "[]" type

   25 const_type: KW_INT
   26           | KW_REAL
   27           | KW_BOOL
   28           | KW_STRING

   29 func_body: %empty
   30          | KW_LET decl ';' func_body
   31          | commands func_body

   32 func_decl: KW_CONST IDENTIFIER ASSIGN '(' func_par_decl ')' ':' type '{' func_body '}'

   33 func_call: IDENTIFIER '(' func_param ')'

   34 func_param: %empty
   35           | func_param ',' func_param
   36           | expr

   37 return_expr: KW_RETURN expr

   38 func_par_decl: %empty
   39              | IDENTIFIER
   40              | IDENTIFIER '[' ']'
   41              | IDENTIFIER '[' ']' ':' type func_par_decl
   42              | IDENTIFIER ':' type func_par_decl
   43              | func_par_decl ',' func_par_decl

   44 data: POSINT
   45     | REAL
   46     | STRING
   47     | KW_TRUE
   48     | KW_FALSE
   49     | ARRAY

   50 decl_const: ',' decl_const
   51           | IDENTIFIER ASSIGN data decl_const
   52           | IDENTIFIER ARRAY ASSIGN data decl_const
   53           | ':' const_type

   54 decl: %empty
   55     | ',' decl
   56     | IDENTIFIER decl
   57     | IDENTIFIER ARRAY decl
   58     | IDENTIFIER ARRAY ASSIGN data decl
   59     | IDENTIFIER ASSIGN data decl
   60     | ':' type

   61 infix_operator: '+'
   62               | '-'
   63               | '*'
   64               | '/'
   65               | '%'
   66               | '='
   67               | '<'
   68               | KW_NOT_EQL
   69               | KW_LESS_EQL
   70               | KW_OR
   71               | KW_AND

   72 prefix_operator: '+'
   73                | '-'
   74                | KW_NOT

   75 expr: POSINT
   76     | REAL
   77     | IDENTIFIER
   78     | IDENTIFIER ARRAY
   79     | func_call
   80     | '(' expr ')'
   81     | expr infix_operator expr
   82     | prefix_operator expr


Terminals, with rules where they appear

$end (0) 0
'%' (37) 65
'(' (40) 32 33 80
')' (41) 32 33 80
'*' (42) 63
'+' (43) 61 72
',' (44) 35 43 50 55
'-' (45) 62 73
'/' (47) 64
':' (58) 32 41 42 53 60
';' (59) 3 4 9 10 11 30
'<' (60) 67
'=' (61) 66
'[' (91) 40 41
']' (93) 40 41
'{' (123) 32
'}' (125) 32
error (256)
IDENTIFIER (258) 10 32 33 39 40 41 42 51 52 56 57 58 59 77 78
POSINT (259) 44 75
REAL (260) 45 76
STRING (261) 46
ARRAY (262) 49 52 57 58 78
ASSIGN (263) 10 32 51 52 58 59
KW_INT (264) 8 20 25
KW_REAL (265) 21 26
KW_BOOL (266) 22 27
KW_STRING (267) 23 28
KW_IF (268) 12
KW_THEN (269) 17
KW_ELSE (270) 19
KW_AND (271) 71
KW_OR (272) 70
KW_NOT (273) 74
KW_NOT_EQL (274) 68
KW_LESS_EQL (275) 69
KW_FI (276) 12
KW_WHILE (277) 13
KW_LOOP (278) 13
KW_POOL (279) 13
KW_CONST (280) 4 7 32
KW_LET (281) 3 30
KW_RETURN (282) 37
KW_START (283)
KW_TRUE (284) 47
KW_FALSE (285) 48
";;;;" (286) 7
"[]" (287) 24


Nonterminals, with rules where they appear

$accept (49)
    on left: 0
input (50)
    on left: 1 2, on right: 0 2
body (51)
    on left: 3 4 5 6 7, on right: 2
defined_func (52)
    on left: 8, on right: 7
commands (53)
    on left: 9 10 11 12 13, on right: 6 14 15 18 31
while_state (54)
    on left: 14 15, on right: 13 15
if_state (55)
    on left: 16 17 18 19, on right: 12 17 18 19
type (56)
    on left: 20 21 22 23 24, on right: 24 32 41 42 60
const_type (57)
    on left: 25 26 27 28, on right: 53
func_body (58)
    on left: 29 30 31, on right: 30 31 32
func_decl (59)
    on left: 32, on right: 5
func_call (60)
    on left: 33, on right: 9 79
func_param (61)
    on left: 34 35 36, on right: 33 35
return_expr (62)
    on left: 37, on right: 11
func_par_decl (63)
    on left: 38 39 40 41 42 43, on right: 32 41 42 43
data (64)
    on left: 44 45 46 47 48 49, on right: 51 52 58 59
decl_const (65)
    on left: 50 51 52 53, on right: 4 50 51 52
decl (66)
    on left: 54 55 56 57 58 59 60, on right: 3 30 55 56 57 58 59
infix_operator (67)
    on left: 61 62 63 64 65 66 67 68 69 70 71, on right: 81
prefix_operator (68)
    on left: 72 73 74, on right: 82
expr (69)
    on left: 75 76 77 78 79 80 81 82, on right: 10 13 17 36 37 80 81
    82


State 0

    0 $accept: . input $end
    1 input: . %empty
    2      | . input body

    $default  reduce using rule 1 (input)

    input  go to state 1


State 1

    0 $accept: input . $end
    2 input: input . body
    3 body: . KW_LET decl ';'
    4     | . KW_CONST decl_const ';'
    5     | . func_decl
    6     | . commands
    7     | . KW_CONST defined_func ";;;;"
    9 commands: . func_call ';'
   10         | . IDENTIFIER ASSIGN expr ';'
   11         | . return_expr ';'
   12         | . KW_IF if_state KW_FI
   13         | . KW_WHILE expr KW_LOOP while_state KW_POOL
   32 func_decl: . KW_CONST IDENTIFIER ASSIGN '(' func_par_decl ')' ':' type '{' func_body '}'
   33 func_call: . IDENTIFIER '(' func_param ')'
   37 return_expr: . KW_RETURN expr

    $end        shift, and go to state 2
    IDENTIFIER  shift, and go to state 3
    KW_IF       shift, and go to state 4
    KW_WHILE    shift, and go to state 5
    KW_CONST    shift, and go to state 6
    KW_LET      shift, and go to state 7
    KW_RETURN   shift, and go to state 8

    body         go to state 9
    commands     go to state 10
    func_decl    go to state 11
    func_call    go to state 12
    return_expr  go to state 13


State 2

    0 $accept: input $end .

    $default  accept


State 3

   10 commands: IDENTIFIER . ASSIGN expr ';'
   33 func_call: IDENTIFIER . '(' func_param ')'

    ASSIGN  shift, and go to state 14
    '('     shift, and go to state 15


State 4

    9 commands: . func_call ';'
   10         | . IDENTIFIER ASSIGN expr ';'
   11         | . return_expr ';'
   12         | . KW_IF if_state KW_FI
   12         | KW_IF . if_state KW_FI
   13         | . KW_WHILE expr KW_LOOP while_state KW_POOL
   16 if_state: . %empty  [KW_FI]
   17         | . expr KW_THEN if_state
   18         | . commands if_state
   19         | . KW_ELSE if_state
   33 func_call: . IDENTIFIER '(' func_param ')'
   37 return_expr: . KW_RETURN expr
   72 prefix_operator: . '+'
   73                | . '-'
   74                | . KW_NOT
   75 expr: . POSINT
   76     | . REAL
   77     | . IDENTIFIER
   78     | . IDENTIFIER ARRAY
   79     | . func_call
   80     | . '(' expr ')'
   81     | . expr infix_operator expr
   82     | . prefix_operator expr

    IDENTIFIER  shift, and go to state 16
    POSINT      shift, and go to state 17
    REAL        shift, and go to state 18
    KW_IF       shift, and go to state 4
    KW_ELSE     shift, and go to state 19
    KW_NOT      shift, and go to state 20
    KW_WHILE    shift, and go to state 5
    KW_RETURN   shift, and go to state 8
    '-'         shift, and go to state 21
    '+'         shift, and go to state 22
    '('         shift, and go to state 23

    $default  reduce using rule 16 (if_state)

    commands         go to state 24
    if_state         go to state 25
    func_call        go to state 26
    return_expr      go to state 13
    prefix_operator  go to state 27
    expr             go to state 28


State 5

   13 commands: KW_WHILE . expr KW_LOOP while_state KW_POOL
   33 func_call: . IDENTIFIER '(' func_param ')'
   72 prefix_operator: . '+'
   73                | . '-'
   74                | . KW_NOT
   75 expr: . POSINT
   76     | . REAL
   77     | . IDENTIFIER
   78     | . IDENTIFIER ARRAY
   79     | . func_call
   80     | . '(' expr ')'
   81     | . expr infix_operator expr
   82     | . prefix_operator expr

    IDENTIFIER  shift, and go to state 29
    POSINT      shift, and go to state 17
    REAL        shift, and go to state 18
    KW_NOT      shift, and go to state 20
    '-'         shift, and go to state 21
    '+'         shift, and go to state 22
    '('         shift, and go to state 23

    func_call        go to state 30
    prefix_operator  go to state 27
    expr             go to state 31


State 6

    4 body: KW_CONST . decl_const ';'
    7     | KW_CONST . defined_func ";;;;"
    8 defined_func: . KW_INT
   32 func_decl: KW_CONST . IDENTIFIER ASSIGN '(' func_par_decl ')' ':' type '{' func_body '}'
   50 decl_const: . ',' decl_const
   51           | . IDENTIFIER ASSIGN data decl_const
   52           | . IDENTIFIER ARRAY ASSIGN data decl_const
   53           | . ':' const_type

    IDENTIFIER  shift, and go to state 32
    KW_INT      shift, and go to state 33
    ':'         shift, and go to state 34
    ','         shift, and go to state 35

    defined_func  go to state 36
    decl_const    go to state 37


State 7

    3 body: KW_LET . decl ';'
   54 decl: . %empty  [';']
   55     | . ',' decl
   56     | . IDENTIFIER decl
   57     | . IDENTIFIER ARRAY decl
   58     | . IDENTIFIER ARRAY ASSIGN data decl
   59     | . IDENTIFIER ASSIGN data decl
   60     | . ':' type

    IDENTIFIER  shift, and go to state 38
    ':'         shift, and go to state 39
    ','         shift, and go to state 40

    $default  reduce using rule 54 (decl)

    decl  go to state 41


State 8

   33 func_call: . IDENTIFIER '(' func_param ')'
   37 return_expr: KW_RETURN . expr
   72 prefix_operator: . '+'
   73                | . '-'
   74                | . KW_NOT
   75 expr: . POSINT
   76     | . REAL
   77     | . IDENTIFIER
   78     | . IDENTIFIER ARRAY
   79     | . func_call
   80     | . '(' expr ')'
   81     | . expr infix_operator expr
   82     | . prefix_operator expr

    IDENTIFIER  shift, and go to state 29
    POSINT      shift, and go to state 17
    REAL        shift, and go to state 18
    KW_NOT      shift, and go to state 20
    '-'         shift, and go to state 21
    '+'         shift, and go to state 22
    '('         shift, and go to state 23

    func_call        go to state 30
    prefix_operator  go to state 27
    expr             go to state 42


State 9

    2 input: input body .

    $default  reduce using rule 2 (input)


State 10

    6 body: commands .

    $default  reduce using rule 6 (body)


State 11

    5 body: func_decl .

    $default  reduce using rule 5 (body)


State 12

    9 commands: func_call . ';'

    ';'  shift, and go to state 43


State 13

   11 commands: return_expr . ';'

    ';'  shift, and go to state 44


State 14

   10 commands: IDENTIFIER ASSIGN . expr ';'
   33 func_call: . IDENTIFIER '(' func_param ')'
   72 prefix_operator: . '+'
   73                | . '-'
   74                | . KW_NOT
   75 expr: . POSINT
   76     | . REAL
   77     | . IDENTIFIER
   78     | . IDENTIFIER ARRAY
   79     | . func_call
   80     | . '(' expr ')'
   81     | . expr infix_operator expr
   82     | . prefix_operator expr

    IDENTIFIER  shift, and go to state 29
    POSINT      shift, and go to state 17
    REAL        shift, and go to state 18
    KW_NOT      shift, and go to state 20
    '-'         shift, and go to state 21
    '+'         shift, and go to state 22
    '('         shift, and go to state 23

    func_call        go to state 30
    prefix_operator  go to state 27
    expr             go to state 45


State 15

   33 func_call: . IDENTIFIER '(' func_param ')'
   33          | IDENTIFIER '(' . func_param ')'
   34 func_param: . %empty  [')', ',']
   35           | . func_param ',' func_param
   36           | . expr
   72 prefix_operator: . '+'
   73                | . '-'
   74                | . KW_NOT
   75 expr: . POSINT
   76     | . REAL
   77     | . IDENTIFIER
   78     | . IDENTIFIER ARRAY
   79     | . func_call
   80     | . '(' expr ')'
   81     | . expr infix_operator expr
   82     | . prefix_operator expr

    IDENTIFIER  shift, and go to state 29
    POSINT      shift, and go to state 17
    REAL        shift, and go to state 18
    KW_NOT      shift, and go to state 20
    '-'         shift, and go to state 21
    '+'         shift, and go to state 22
    '('         shift, and go to state 23

    $default  reduce using rule 34 (func_param)

    func_call        go to state 30
    func_param       go to state 46
    prefix_operator  go to state 27
    expr             go to state 47


State 16

   10 commands: IDENTIFIER . ASSIGN expr ';'
   33 func_call: IDENTIFIER . '(' func_param ')'
   77 expr: IDENTIFIER .  [KW_THEN, KW_AND, KW_OR, KW_NOT_EQL, KW_LESS_EQL, '=', '<', '-', '+', '*', '/', '%']
   78     | IDENTIFIER . ARRAY

    ARRAY   shift, and go to state 48
    ASSIGN  shift, and go to state 14
    '('     shift, and go to state 15

    $default  reduce using rule 77 (expr)


State 17

   75 expr: POSINT .

    $default  reduce using rule 75 (expr)


State 18

   76 expr: REAL .

    $default  reduce using rule 76 (expr)


State 19

    9 commands: . func_call ';'
   10         | . IDENTIFIER ASSIGN expr ';'
   11         | . return_expr ';'
   12         | . KW_IF if_state KW_FI
   13         | . KW_WHILE expr KW_LOOP while_state KW_POOL
   16 if_state: . %empty  [KW_FI]
   17         | . expr KW_THEN if_state
   18         | . commands if_state
   19         | . KW_ELSE if_state
   19         | KW_ELSE . if_state
   33 func_call: . IDENTIFIER '(' func_param ')'
   37 return_expr: . KW_RETURN expr
   72 prefix_operator: . '+'
   73                | . '-'
   74                | . KW_NOT
   75 expr: . POSINT
   76     | . REAL
   77     | . IDENTIFIER
   78     | . IDENTIFIER ARRAY
   79     | . func_call
   80     | . '(' expr ')'
   81     | . expr infix_operator expr
   82     | . prefix_operator expr

    IDENTIFIER  shift, and go to state 16
    POSINT      shift, and go to state 17
    REAL        shift, and go to state 18
    KW_IF       shift, and go to state 4
    KW_ELSE     shift, and go to state 19
    KW_NOT      shift, and go to state 20
    KW_WHILE    shift, and go to state 5
    KW_RETURN   shift, and go to state 8
    '-'         shift, and go to state 21
    '+'         shift, and go to state 22
    '('         shift, and go to state 23

    $default  reduce using rule 16 (if_state)

    commands         go to state 24
    if_state         go to state 49
    func_call        go to state 26
    return_expr      go to state 13
    prefix_operator  go to state 27
    expr             go to state 28


State 20

   74 prefix_operator: KW_NOT .

    $default  reduce using rule 74 (prefix_operator)


State 21

   73 prefix_operator: '-' .

    $default  reduce using rule 73 (prefix_operator)


State 22

   72 prefix_operator: '+' .

    $default  reduce using rule 72 (prefix_operator)


State 23

   33 func_call: . IDENTIFIER '(' func_param ')'
   72 prefix_operator: . '+'
   73                | . '-'
   74                | . KW_NOT
   75 expr: . POSINT
   76     | . REAL
   77     | . IDENTIFIER
   78     | . IDENTIFIER ARRAY
   79     | . func_call
   80     | . '(' expr ')'
   80     | '(' . expr ')'
   81     | . expr infix_operator expr
   82     | . prefix_operator expr

    IDENTIFIER  shift, and go to state 29
    POSINT      shift, and go to state 17
    REAL        shift, and go to state 18
    KW_NOT      shift, and go to state 20
    '-'         shift, and go to state 21
    '+'         shift, and go to state 22
    '('         shift, and go to state 23

    func_call        go to state 30
    prefix_operator  go to state 27
    expr             go to state 50


State 24

    9 commands: . func_call ';'
   10         | . IDENTIFIER ASSIGN expr ';'
   11         | . return_expr ';'
   12         | . KW_IF if_state KW_FI
   13         | . KW_WHILE expr KW_LOOP while_state KW_POOL
   16 if_state: . %empty  [KW_FI]
   17         | . expr KW_THEN if_state
   18         | . commands if_state
   18         | commands . if_state
   19         | . KW_ELSE if_state
   33 func_call: . IDENTIFIER '(' func_param ')'
   37 return_expr: . KW_RETURN expr
   72 prefix_operator: . '+'
   73                | . '-'
   74                | . KW_NOT
   75 expr: . POSINT
   76     | . REAL
   77     | . IDENTIFIER
   78     | . IDENTIFIER ARRAY
   79     | . func_call
   80     | . '(' expr ')'
   81     | . expr infix_operator expr
   82     | . prefix_operator expr

    IDENTIFIER  shift, and go to state 16
    POSINT      shift, and go to state 17
    REAL        shift, and go to state 18
    KW_IF       shift, and go to state 4
    KW_ELSE     shift, and go to state 19
    KW_NOT      shift, and go to state 20
    KW_WHILE    shift, and go to state 5
    KW_RETURN   shift, and go to state 8
    '-'         shift, and go to state 21
    '+'         shift, and go to state 22
    '('         shift, and go to state 23

    $default  reduce using rule 16 (if_state)

    commands         go to state 24
    if_state         go to state 51
    func_call        go to state 26
    return_expr      go to state 13
    prefix_operator  go to state 27
    expr             go to state 28


State 25

   12 commands: KW_IF if_state . KW_FI

    KW_FI  shift, and go to state 52


State 26

    9 commands: func_call . ';'
   79 expr: func_call .  [KW_THEN, KW_AND, KW_OR, KW_NOT_EQL, KW_LESS_EQL, '=', '<', '-', '+', '*', '/', '%']

    ';'  shift, and go to state 43

    $default  reduce using rule 79 (expr)


State 27

   33 func_call: . IDENTIFIER '(' func_param ')'
   72 prefix_operator: . '+'
   73                | . '-'
   74                | . KW_NOT
   75 expr: . POSINT
   76     | . REAL
   77     | . IDENTIFIER
   78     | . IDENTIFIER ARRAY
   79     | . func_call
   80     | . '(' expr ')'
   81     | . expr infix_operator expr
   82     | . prefix_operator expr
   82     | prefix_operator . expr

    IDENTIFIER  shift, and go to state 29
    POSINT      shift, and go to state 17
    REAL        shift, and go to state 18
    KW_NOT      shift, and go to state 20
    '-'         shift, and go to state 21
    '+'         shift, and go to state 22
    '('         shift, and go to state 23

    func_call        go to state 30
    prefix_operator  go to state 27
    expr             go to state 53


State 28

   17 if_state: expr . KW_THEN if_state
   61 infix_operator: . '+'
   62               | . '-'
   63               | . '*'
   64               | . '/'
   65               | . '%'
   66               | . '='
   67               | . '<'
   68               | . KW_NOT_EQL
   69               | . KW_LESS_EQL
   70               | . KW_OR
   71               | . KW_AND
   81 expr: expr . infix_operator expr

    KW_THEN      shift, and go to state 54
    KW_AND       shift, and go to state 55
    KW_OR        shift, and go to state 56
    KW_NOT_EQL   shift, and go to state 57
    KW_LESS_EQL  shift, and go to state 58
    '='          shift, and go to state 59
    '<'          shift, and go to state 60
    '-'          shift, and go to state 61
    '+'          shift, and go to state 62
    '*'          shift, and go to state 63
    '/'          shift, and go to state 64
    '%'          shift, and go to state 65

    infix_operator  go to state 66


State 29

   33 func_call: IDENTIFIER . '(' func_param ')'
   77 expr: IDENTIFIER .  [KW_THEN, KW_AND, KW_OR, KW_NOT_EQL, KW_LESS_EQL, KW_LOOP, '=', '<', '-', '+', '*', '/', '%', ';', ')', ',']
   78     | IDENTIFIER . ARRAY

    ARRAY  shift, and go to state 48
    '('    shift, and go to state 15

    $default  reduce using rule 77 (expr)


State 30

   79 expr: func_call .

    $default  reduce using rule 79 (expr)


State 31

   13 commands: KW_WHILE expr . KW_LOOP while_state KW_POOL
   61 infix_operator: . '+'
   62               | . '-'
   63               | . '*'
   64               | . '/'
   65               | . '%'
   66               | . '='
   67               | . '<'
   68               | . KW_NOT_EQL
   69               | . KW_LESS_EQL
   70               | . KW_OR
   71               | . KW_AND
   81 expr: expr . infix_operator expr

    KW_AND       shift, and go to state 55
    KW_OR        shift, and go to state 56
    KW_NOT_EQL   shift, and go to state 57
    KW_LESS_EQL  shift, and go to state 58
    KW_LOOP      shift, and go to state 67
    '='          shift, and go to state 59
    '<'          shift, and go to state 60
    '-'          shift, and go to state 61
    '+'          shift, and go to state 62
    '*'          shift, and go to state 63
    '/'          shift, and go to state 64
    '%'          shift, and go to state 65

    infix_operator  go to state 66


State 32

   32 func_decl: KW_CONST IDENTIFIER . ASSIGN '(' func_par_decl ')' ':' type '{' func_body '}'
   51 decl_const: IDENTIFIER . ASSIGN data decl_const
   52           | IDENTIFIER . ARRAY ASSIGN data decl_const

    ARRAY   shift, and go to state 68
    ASSIGN  shift, and go to state 69


State 33

    8 defined_func: KW_INT .

    $default  reduce using rule 8 (defined_func)


State 34

   25 const_type: . KW_INT
   26           | . KW_REAL
   27           | . KW_BOOL
   28           | . KW_STRING
   53 decl_const: ':' . const_type

    KW_INT     shift, and go to state 70
    KW_REAL    shift, and go to state 71
    KW_BOOL    shift, and go to state 72
    KW_STRING  shift, and go to state 73

    const_type  go to state 74


State 35

   50 decl_const: . ',' decl_const
   50           | ',' . decl_const
   51           | . IDENTIFIER ASSIGN data decl_const
   52           | . IDENTIFIER ARRAY ASSIGN data decl_const
   53           | . ':' const_type

    IDENTIFIER  shift, and go to state 75
    ':'         shift, and go to state 34
    ','         shift, and go to state 35

    decl_const  go to state 76


State 36

    7 body: KW_CONST defined_func . ";;;;"

    ";;;;"  shift, and go to state 77


State 37

    4 body: KW_CONST decl_const . ';'

    ';'  shift, and go to state 78


State 38

   54 decl: . %empty  [';']
   55     | . ',' decl
   56     | . IDENTIFIER decl
   56     | IDENTIFIER . decl
   57     | . IDENTIFIER ARRAY decl
   57     | IDENTIFIER . ARRAY decl
   58     | . IDENTIFIER ARRAY ASSIGN data decl
   58     | IDENTIFIER . ARRAY ASSIGN data decl
   59     | . IDENTIFIER ASSIGN data decl
   59     | IDENTIFIER . ASSIGN data decl
   60     | . ':' type

    IDENTIFIER  shift, and go to state 38
    ARRAY       shift, and go to state 79
    ASSIGN      shift, and go to state 80
    ':'         shift, and go to state 39
    ','         shift, and go to state 40

    $default  reduce using rule 54 (decl)

    decl  go to state 81


State 39

   20 type: . KW_INT
   21     | . KW_REAL
   22     | . KW_BOOL
   23     | . KW_STRING
   24     | . "[]" type
   60 decl: ':' . type

    KW_INT     shift, and go to state 82
    KW_REAL    shift, and go to state 83
    KW_BOOL    shift, and go to state 84
    KW_STRING  shift, and go to state 85
    "[]"       shift, and go to state 86

    type  go to state 87


State 40

   54 decl: . %empty  [';']
   55     | . ',' decl
   55     | ',' . decl
   56     | . IDENTIFIER decl
   57     | . IDENTIFIER ARRAY decl
   58     | . IDENTIFIER ARRAY ASSIGN data decl
   59     | . IDENTIFIER ASSIGN data decl
   60     | . ':' type

    IDENTIFIER  shift, and go to state 38
    ':'         shift, and go to state 39
    ','         shift, and go to state 40

    $default  reduce using rule 54 (decl)

    decl  go to state 88


State 41

    3 body: KW_LET decl . ';'

    ';'  shift, and go to state 89


State 42

   37 return_expr: KW_RETURN expr .  [';']
   61 infix_operator: . '+'
   62               | . '-'
   63               | . '*'
   64               | . '/'
   65               | . '%'
   66               | . '='
   67               | . '<'
   68               | . KW_NOT_EQL
   69               | . KW_LESS_EQL
   70               | . KW_OR
   71               | . KW_AND
   81 expr: expr . infix_operator expr

    KW_AND       shift, and go to state 55
    KW_OR        shift, and go to state 56
    KW_NOT_EQL   shift, and go to state 57
    KW_LESS_EQL  shift, and go to state 58
    '='          shift, and go to state 59
    '<'          shift, and go to state 60
    '-'          shift, and go to state 61
    '+'          shift, and go to state 62
    '*'          shift, and go to state 63
    '/'          shift, and go to state 64
    '%'          shift, and go to state 65

    $default  reduce using rule 37 (return_expr)

    infix_operator  go to state 66


State 43

    9 commands: func_call ';' .

    $default  reduce using rule 9 (commands)


State 44

   11 commands: return_expr ';' .

    $default  reduce using rule 11 (commands)


State 45

   10 commands: IDENTIFIER ASSIGN expr . ';'
   61 infix_operator: . '+'
   62               | . '-'
   63               | . '*'
   64               | . '/'
   65               | . '%'
   66               | . '='
   67               | . '<'
   68               | . KW_NOT_EQL
   69               | . KW_LESS_EQL
   70               | . KW_OR
   71               | . KW_AND
   81 expr: expr . infix_operator expr

    KW_AND       shift, and go to state 55
    KW_OR        shift, and go to state 56
    KW_NOT_EQL   shift, and go to state 57
    KW_LESS_EQL  shift, and go to state 58
    '='          shift, and go to state 59
    '<'          shift, and go to state 60
    '-'          shift, and go to state 61
    '+'          shift, and go to state 62
    '*'          shift, and go to state 63
    '/'          shift, and go to state 64
    '%'          shift, and go to state 65
    ';'          shift, and go to state 90

    infix_operator  go to state 66


State 46

   33 func_call: IDENTIFIER '(' func_param . ')'
   35 func_param: func_param . ',' func_param

    ')'  shift, and go to state 91
    ','  shift, and go to state 92


State 47

   36 func_param: expr .  [')', ',']
   61 infix_operator: . '+'
   62               | . '-'
   63               | . '*'
   64               | . '/'
   65               | . '%'
   66               | . '='
   67               | . '<'
   68               | . KW_NOT_EQL
   69               | . KW_LESS_EQL
   70               | . KW_OR
   71               | . KW_AND
   81 expr: expr . infix_operator expr

    KW_AND       shift, and go to state 55
    KW_OR        shift, and go to state 56
    KW_NOT_EQL   shift, and go to state 57
    KW_LESS_EQL  shift, and go to state 58
    '='          shift, and go to state 59
    '<'          shift, and go to state 60
    '-'          shift, and go to state 61
    '+'          shift, and go to state 62
    '*'          shift, and go to state 63
    '/'          shift, and go to state 64
    '%'          shift, and go to state 65

    $default  reduce using rule 36 (func_param)

    infix_operator  go to state 66


State 48

   78 expr: IDENTIFIER ARRAY .

    $default  reduce using rule 78 (expr)


State 49

   19 if_state: KW_ELSE if_state .

    $default  reduce using rule 19 (if_state)


State 50

   61 infix_operator: . '+'
   62               | . '-'
   63               | . '*'
   64               | . '/'
   65               | . '%'
   66               | . '='
   67               | . '<'
   68               | . KW_NOT_EQL
   69               | . KW_LESS_EQL
   70               | . KW_OR
   71               | . KW_AND
   80 expr: '(' expr . ')'
   81     | expr . infix_operator expr

    KW_AND       shift, and go to state 55
    KW_OR        shift, and go to state 56
    KW_NOT_EQL   shift, and go to state 57
    KW_LESS_EQL  shift, and go to state 58
    '='          shift, and go to state 59
    '<'          shift, and go to state 60
    '-'          shift, and go to state 61
    '+'          shift, and go to state 62
    '*'          shift, and go to state 63
    '/'          shift, and go to state 64
    '%'          shift, and go to state 65
    ')'          shift, and go to state 93

    infix_operator  go to state 66


State 51

   18 if_state: commands if_state .

    $default  reduce using rule 18 (if_state)


State 52

   12 commands: KW_IF if_state KW_FI .

    $default  reduce using rule 12 (commands)


State 53

   61 infix_operator: . '+'
   62               | . '-'
   63               | . '*'
   64               | . '/'
   65               | . '%'
   66               | . '='
   67               | . '<'
   68               | . KW_NOT_EQL
   69               | . KW_LESS_EQL
   70               | . KW_OR
   71               | . KW_AND
   81 expr: expr . infix_operator expr
   82     | prefix_operator expr .  [KW_THEN, KW_AND, KW_OR, KW_NOT_EQL, KW_LESS_EQL, KW_LOOP, '=', '<', '-', '+', '*', '/', '%', ';', ')', ',']

    KW_AND       shift, and go to state 55
    KW_OR        shift, and go to state 56
    KW_NOT_EQL   shift, and go to state 57
    KW_LESS_EQL  shift, and go to state 58
    '='          shift, and go to state 59
    '<'          shift, and go to state 60
    '-'          shift, and go to state 61
    '+'          shift, and go to state 62
    '*'          shift, and go to state 63
    '/'          shift, and go to state 64
    '%'          shift, and go to state 65

    KW_AND       [reduce using rule 82 (expr)]
    KW_OR        [reduce using rule 82 (expr)]
    KW_NOT_EQL   [reduce using rule 82 (expr)]
    KW_LESS_EQL  [reduce using rule 82 (expr)]
    '='          [reduce using rule 82 (expr)]
    '<'          [reduce using rule 82 (expr)]
    '-'          [reduce using rule 82 (expr)]
    '+'          [reduce using rule 82 (expr)]
    '*'          [reduce using rule 82 (expr)]
    '/'          [reduce using rule 82 (expr)]
    '%'          [reduce using rule 82 (expr)]
    $default     reduce using rule 82 (expr)

    infix_operator  go to state 66


State 54

    9 commands: . func_call ';'
   10         | . IDENTIFIER ASSIGN expr ';'
   11         | . return_expr ';'
   12         | . KW_IF if_state KW_FI
   13         | . KW_WHILE expr KW_LOOP while_state KW_POOL
   16 if_state: . %empty  [KW_FI]
   17         | . expr KW_THEN if_state
   17         | expr KW_THEN . if_state
   18         | . commands if_state
   19         | . KW_ELSE if_state
   33 func_call: . IDENTIFIER '(' func_param ')'
   37 return_expr: . KW_RETURN expr
   72 prefix_operator: . '+'
   73                | . '-'
   74                | . KW_NOT
   75 expr: . POSINT
   76     | . REAL
   77     | . IDENTIFIER
   78     | . IDENTIFIER ARRAY
   79     | . func_call
   80     | . '(' expr ')'
   81     | . expr infix_operator expr
   82     | . prefix_operator expr

    IDENTIFIER  shift, and go to state 16
    POSINT      shift, and go to state 17
    REAL        shift, and go to state 18
    KW_IF       shift, and go to state 4
    KW_ELSE     shift, and go to state 19
    KW_NOT      shift, and go to state 20
    KW_WHILE    shift, and go to state 5
    KW_RETURN   shift, and go to state 8
    '-'         shift, and go to state 21
    '+'         shift, and go to state 22
    '('         shift, and go to state 23

    $default  reduce using rule 16 (if_state)

    commands         go to state 24
    if_state         go to state 94
    func_call        go to state 26
    return_expr      go to state 13
    prefix_operator  go to state 27
    expr             go to state 28


State 55

   71 infix_operator: KW_AND .

    $default  reduce using rule 71 (infix_operator)


State 56

   70 infix_operator: KW_OR .

    $default  reduce using rule 70 (infix_operator)


State 57

   68 infix_operator: KW_NOT_EQL .

    $default  reduce using rule 68 (infix_operator)


State 58

   69 infix_operator: KW_LESS_EQL .

    $default  reduce using rule 69 (infix_operator)


State 59

   66 infix_operator: '=' .

    $default  reduce using rule 66 (infix_operator)


State 60

   67 infix_operator: '<' .

    $default  reduce using rule 67 (infix_operator)


State 61

   62 infix_operator: '-' .

    $default  reduce using rule 62 (infix_operator)


State 62

   61 infix_operator: '+' .

    $default  reduce using rule 61 (infix_operator)


State 63

   63 infix_operator: '*' .

    $default  reduce using rule 63 (infix_operator)


State 64

   64 infix_operator: '/' .

    $default  reduce using rule 64 (infix_operator)


State 65

   65 infix_operator: '%' .

    $default  reduce using rule 65 (infix_operator)


State 66

   33 func_call: . IDENTIFIER '(' func_param ')'
   72 prefix_operator: . '+'
   73                | . '-'
   74                | . KW_NOT
   75 expr: . POSINT
   76     | . REAL
   77     | . IDENTIFIER
   78     | . IDENTIFIER ARRAY
   79     | . func_call
   80     | . '(' expr ')'
   81     | . expr infix_operator expr
   81     | expr infix_operator . expr
   82     | . prefix_operator expr

    IDENTIFIER  shift, and go to state 29
    POSINT      shift, and go to state 17
    REAL        shift, and go to state 18
    KW_NOT      shift, and go to state 20
    '-'         shift, and go to state 21
    '+'         shift, and go to state 22
    '('         shift, and go to state 23

    func_call        go to state 30
    prefix_operator  go to state 27
    expr             go to state 95


State 67

    9 commands: . func_call ';'
   10         | . IDENTIFIER ASSIGN expr ';'
   11         | . return_expr ';'
   12         | . KW_IF if_state KW_FI
   13         | . KW_WHILE expr KW_LOOP while_state KW_POOL
   13         | KW_WHILE expr KW_LOOP . while_state KW_POOL
   14 while_state: . commands
   15            | . commands while_state
   33 func_call: . IDENTIFIER '(' func_param ')'
   37 return_expr: . KW_RETURN expr

    IDENTIFIER  shift, and go to state 3
    KW_IF       shift, and go to state 4
    KW_WHILE    shift, and go to state 5
    KW_RETURN   shift, and go to state 8

    commands     go to state 96
    while_state  go to state 97
    func_call    go to state 12
    return_expr  go to state 13


State 68

   52 decl_const: IDENTIFIER ARRAY . ASSIGN data decl_const

    ASSIGN  shift, and go to state 98


State 69

   32 func_decl: KW_CONST IDENTIFIER ASSIGN . '(' func_par_decl ')' ':' type '{' func_body '}'
   44 data: . POSINT
   45     | . REAL
   46     | . STRING
   47     | . KW_TRUE
   48     | . KW_FALSE
   49     | . ARRAY
   51 decl_const: IDENTIFIER ASSIGN . data decl_const

    POSINT    shift, and go to state 99
    REAL      shift, and go to state 100
    STRING    shift, and go to state 101
    ARRAY     shift, and go to state 102
    KW_TRUE   shift, and go to state 103
    KW_FALSE  shift, and go to state 104
    '('       shift, and go to state 105

    data  go to state 106


State 70

   25 const_type: KW_INT .

    $default  reduce using rule 25 (const_type)


State 71

   26 const_type: KW_REAL .

    $default  reduce using rule 26 (const_type)


State 72

   27 const_type: KW_BOOL .

    $default  reduce using rule 27 (const_type)


State 73

   28 const_type: KW_STRING .

    $default  reduce using rule 28 (const_type)


State 74

   53 decl_const: ':' const_type .

    $default  reduce using rule 53 (decl_const)


State 75

   51 decl_const: IDENTIFIER . ASSIGN data decl_const
   52           | IDENTIFIER . ARRAY ASSIGN data decl_const

    ARRAY   shift, and go to state 68
    ASSIGN  shift, and go to state 107


State 76

   50 decl_const: ',' decl_const .

    $default  reduce using rule 50 (decl_const)


State 77

    7 body: KW_CONST defined_func ";;;;" .

    $default  reduce using rule 7 (body)


State 78

    4 body: KW_CONST decl_const ';' .

    $default  reduce using rule 4 (body)


State 79

   54 decl: . %empty  [';']
   55     | . ',' decl
   56     | . IDENTIFIER decl
   57     | . IDENTIFIER ARRAY decl
   57     | IDENTIFIER ARRAY . decl
   58     | . IDENTIFIER ARRAY ASSIGN data decl
   58     | IDENTIFIER ARRAY . ASSIGN data decl
   59     | . IDENTIFIER ASSIGN data decl
   60     | . ':' type

    IDENTIFIER  shift, and go to state 38
    ASSIGN      shift, and go to state 108
    ':'         shift, and go to state 39
    ','         shift, and go to state 40

    $default  reduce using rule 54 (decl)

    decl  go to state 109


State 80

   44 data: . POSINT
   45     | . REAL
   46     | . STRING
   47     | . KW_TRUE
   48     | . KW_FALSE
   49     | . ARRAY
   59 decl: IDENTIFIER ASSIGN . data decl

    POSINT    shift, and go to state 99
    REAL      shift, and go to state 100
    STRING    shift, and go to state 101
    ARRAY     shift, and go to state 102
    KW_TRUE   shift, and go to state 103
    KW_FALSE  shift, and go to state 104

    data  go to state 110


State 81

   56 decl: IDENTIFIER decl .

    $default  reduce using rule 56 (decl)


State 82

   20 type: KW_INT .

    $default  reduce using rule 20 (type)


State 83

   21 type: KW_REAL .

    $default  reduce using rule 21 (type)


State 84

   22 type: KW_BOOL .

    $default  reduce using rule 22 (type)


State 85

   23 type: KW_STRING .

    $default  reduce using rule 23 (type)


State 86

   20 type: . KW_INT
   21     | . KW_REAL
   22     | . KW_BOOL
   23     | . KW_STRING
   24     | . "[]" type
   24     | "[]" . type

    KW_INT     shift, and go to state 82
    KW_REAL    shift, and go to state 83
    KW_BOOL    shift, and go to state 84
    KW_STRING  shift, and go to state 85
    "[]"       shift, and go to state 86

    type  go to state 111


State 87

   60 decl: ':' type .

    $default  reduce using rule 60 (decl)


State 88

   55 decl: ',' decl .

    $default  reduce using rule 55 (decl)


State 89

    3 body: KW_LET decl ';' .

    $default  reduce using rule 3 (body)


State 90

   10 commands: IDENTIFIER ASSIGN expr ';' .

    $default  reduce using rule 10 (commands)


State 91

   33 func_call: IDENTIFIER '(' func_param ')' .

    $default  reduce using rule 33 (func_call)


State 92

   33 func_call: . IDENTIFIER '(' func_param ')'
   34 func_param: . %empty  [')', ',']
   35           | . func_param ',' func_param
   35           | func_param ',' . func_param
   36           | . expr
   72 prefix_operator: . '+'
   73                | . '-'
   74                | . KW_NOT
   75 expr: . POSINT
   76     | . REAL
   77     | . IDENTIFIER
   78     | . IDENTIFIER ARRAY
   79     | . func_call
   80     | . '(' expr ')'
   81     | . expr infix_operator expr
   82     | . prefix_operator expr

    IDENTIFIER  shift, and go to state 29
    POSINT      shift, and go to state 17
    REAL        shift, and go to state 18
    KW_NOT      shift, and go to state 20
    '-'         shift, and go to state 21
    '+'         shift, and go to state 22
    '('         shift, and go to state 23

    $default  reduce using rule 34 (func_param)

    func_call        go to state 30
    func_param       go to state 112
    prefix_operator  go to state 27
    expr             go to state 47


State 93

   80 expr: '(' expr ')' .

    $default  reduce using rule 80 (expr)


State 94

   17 if_state: expr KW_THEN if_state .

    $default  reduce using rule 17 (if_state)


State 95

   61 infix_operator: . '+'
   62               | . '-'
   63               | . '*'
   64               | . '/'
   65               | . '%'
   66               | . '='
   67               | . '<'
   68               | . KW_NOT_EQL
   69               | . KW_LESS_EQL
   70               | . KW_OR
   71               | . KW_AND
   81 expr: expr . infix_operator expr
   81     | expr infix_operator expr .  [KW_THEN, KW_AND, KW_OR, KW_NOT_EQL, KW_LESS_EQL, KW_LOOP, '=', '<', '-', '+', '*', '/', '%', ';', ')', ',']

    KW_AND       shift, and go to state 55
    KW_OR        shift, and go to state 56
    KW_NOT_EQL   shift, and go to state 57
    KW_LESS_EQL  shift, and go to state 58
    '='          shift, and go to state 59
    '<'          shift, and go to state 60
    '-'          shift, and go to state 61
    '+'          shift, and go to state 62
    '*'          shift, and go to state 63
    '/'          shift, and go to state 64
    '%'          shift, and go to state 65

    KW_AND       [reduce using rule 81 (expr)]
    KW_OR        [reduce using rule 81 (expr)]
    KW_NOT_EQL   [reduce using rule 81 (expr)]
    KW_LESS_EQL  [reduce using rule 81 (expr)]
    '='          [reduce using rule 81 (expr)]
    '<'          [reduce using rule 81 (expr)]
    '-'          [reduce using rule 81 (expr)]
    '+'          [reduce using rule 81 (expr)]
    '*'          [reduce using rule 81 (expr)]
    '/'          [reduce using rule 81 (expr)]
    '%'          [reduce using rule 81 (expr)]
    $default     reduce using rule 81 (expr)

    infix_operator  go to state 66


State 96

    9 commands: . func_call ';'
   10         | . IDENTIFIER ASSIGN expr ';'
   11         | . return_expr ';'
   12         | . KW_IF if_state KW_FI
   13         | . KW_WHILE expr KW_LOOP while_state KW_POOL
   14 while_state: . commands
   14            | commands .  [KW_POOL]
   15            | . commands while_state
   15            | commands . while_state
   33 func_call: . IDENTIFIER '(' func_param ')'
   37 return_expr: . KW_RETURN expr

    IDENTIFIER  shift, and go to state 3
    KW_IF       shift, and go to state 4
    KW_WHILE    shift, and go to state 5
    KW_RETURN   shift, and go to state 8

    $default  reduce using rule 14 (while_state)

    commands     go to state 96
    while_state  go to state 113
    func_call    go to state 12
    return_expr  go to state 13


State 97

   13 commands: KW_WHILE expr KW_LOOP while_state . KW_POOL

    KW_POOL  shift, and go to state 114


State 98

   44 data: . POSINT
   45     | . REAL
   46     | . STRING
   47     | . KW_TRUE
   48     | . KW_FALSE
   49     | . ARRAY
   52 decl_const: IDENTIFIER ARRAY ASSIGN . data decl_const

    POSINT    shift, and go to state 99
    REAL      shift, and go to state 100
    STRING    shift, and go to state 101
    ARRAY     shift, and go to state 102
    KW_TRUE   shift, and go to state 103
    KW_FALSE  shift, and go to state 104

    data  go to state 115


State 99

   44 data: POSINT .

    $default  reduce using rule 44 (data)


State 100

   45 data: REAL .

    $default  reduce using rule 45 (data)


State 101

   46 data: STRING .

    $default  reduce using rule 46 (data)


State 102

   49 data: ARRAY .

    $default  reduce using rule 49 (data)


State 103

   47 data: KW_TRUE .

    $default  reduce using rule 47 (data)


State 104

   48 data: KW_FALSE .

    $default  reduce using rule 48 (data)


State 105

   32 func_decl: KW_CONST IDENTIFIER ASSIGN '(' . func_par_decl ')' ':' type '{' func_body '}'
   38 func_par_decl: . %empty  [')', ',']
   39              | . IDENTIFIER
   40              | . IDENTIFIER '[' ']'
   41              | . IDENTIFIER '[' ']' ':' type func_par_decl
   42              | . IDENTIFIER ':' type func_par_decl
   43              | . func_par_decl ',' func_par_decl

    IDENTIFIER  shift, and go to state 116

    $default  reduce using rule 38 (func_par_decl)

    func_par_decl  go to state 117


State 106

   50 decl_const: . ',' decl_const
   51           | . IDENTIFIER ASSIGN data decl_const
   51           | IDENTIFIER ASSIGN data . decl_const
   52           | . IDENTIFIER ARRAY ASSIGN data decl_const
   53           | . ':' const_type

    IDENTIFIER  shift, and go to state 75
    ':'         shift, and go to state 34
    ','         shift, and go to state 35

    decl_const  go to state 118


State 107

   44 data: . POSINT
   45     | . REAL
   46     | . STRING
   47     | . KW_TRUE
   48     | . KW_FALSE
   49     | . ARRAY
   51 decl_const: IDENTIFIER ASSIGN . data decl_const

    POSINT    shift, and go to state 99
    REAL      shift, and go to state 100
    STRING    shift, and go to state 101
    ARRAY     shift, and go to state 102
    KW_TRUE   shift, and go to state 103
    KW_FALSE  shift, and go to state 104

    data  go to state 106


State 108

   44 data: . POSINT
   45     | . REAL
   46     | . STRING
   47     | . KW_TRUE
   48     | . KW_FALSE
   49     | . ARRAY
   58 decl: IDENTIFIER ARRAY ASSIGN . data decl

    POSINT    shift, and go to state 99
    REAL      shift, and go to state 100
    STRING    shift, and go to state 101
    ARRAY     shift, and go to state 102
    KW_TRUE   shift, and go to state 103
    KW_FALSE  shift, and go to state 104

    data  go to state 119


State 109

   57 decl: IDENTIFIER ARRAY decl .

    $default  reduce using rule 57 (decl)


State 110

   54 decl: . %empty  [';']
   55     | . ',' decl
   56     | . IDENTIFIER decl
   57     | . IDENTIFIER ARRAY decl
   58     | . IDENTIFIER ARRAY ASSIGN data decl
   59     | . IDENTIFIER ASSIGN data decl
   59     | IDENTIFIER ASSIGN data . decl
   60     | . ':' type

    IDENTIFIER  shift, and go to state 38
    ':'         shift, and go to state 39
    ','         shift, and go to state 40

    $default  reduce using rule 54 (decl)

    decl  go to state 120


State 111

   24 type: "[]" type .

    $default  reduce using rule 24 (type)


State 112

   35 func_param: func_param . ',' func_param
   35           | func_param ',' func_param .  [')', ',']

    ','  shift, and go to state 92

    ','       [reduce using rule 35 (func_param)]
    $default  reduce using rule 35 (func_param)


State 113

   15 while_state: commands while_state .

    $default  reduce using rule 15 (while_state)


State 114

   13 commands: KW_WHILE expr KW_LOOP while_state KW_POOL .

    $default  reduce using rule 13 (commands)


State 115

   50 decl_const: . ',' decl_const
   51           | . IDENTIFIER ASSIGN data decl_const
   52           | . IDENTIFIER ARRAY ASSIGN data decl_const
   52           | IDENTIFIER ARRAY ASSIGN data . decl_const
   53           | . ':' const_type

    IDENTIFIER  shift, and go to state 75
    ':'         shift, and go to state 34
    ','         shift, and go to state 35

    decl_const  go to state 121


State 116

   39 func_par_decl: IDENTIFIER .  [')', ',']
   40              | IDENTIFIER . '[' ']'
   41              | IDENTIFIER . '[' ']' ':' type func_par_decl
   42              | IDENTIFIER . ':' type func_par_decl

    ':'  shift, and go to state 122
    '['  shift, and go to state 123

    $default  reduce using rule 39 (func_par_decl)


State 117

   32 func_decl: KW_CONST IDENTIFIER ASSIGN '(' func_par_decl . ')' ':' type '{' func_body '}'
   43 func_par_decl: func_par_decl . ',' func_par_decl

    ')'  shift, and go to state 124
    ','  shift, and go to state 125


State 118

   51 decl_const: IDENTIFIER ASSIGN data decl_const .

    $default  reduce using rule 51 (decl_const)


State 119

   54 decl: . %empty  [';']
   55     | . ',' decl
   56     | . IDENTIFIER decl
   57     | . IDENTIFIER ARRAY decl
   58     | . IDENTIFIER ARRAY ASSIGN data decl
   58     | IDENTIFIER ARRAY ASSIGN data . decl
   59     | . IDENTIFIER ASSIGN data decl
   60     | . ':' type

    IDENTIFIER  shift, and go to state 38
    ':'         shift, and go to state 39
    ','         shift, and go to state 40

    $default  reduce using rule 54 (decl)

    decl  go to state 126


State 120

   59 decl: IDENTIFIER ASSIGN data decl .

    $default  reduce using rule 59 (decl)


State 121

   52 decl_const: IDENTIFIER ARRAY ASSIGN data decl_const .

    $default  reduce using rule 52 (decl_const)


State 122

   20 type: . KW_INT
   21     | . KW_REAL
   22     | . KW_BOOL
   23     | . KW_STRING
   24     | . "[]" type
   42 func_par_decl: IDENTIFIER ':' . type func_par_decl

    KW_INT     shift, and go to state 82
    KW_REAL    shift, and go to state 83
    KW_BOOL    shift, and go to state 84
    KW_STRING  shift, and go to state 85
    "[]"       shift, and go to state 86

    type  go to state 127


State 123

   40 func_par_decl: IDENTIFIER '[' . ']'
   41              | IDENTIFIER '[' . ']' ':' type func_par_decl

    ']'  shift, and go to state 128


State 124

   32 func_decl: KW_CONST IDENTIFIER ASSIGN '(' func_par_decl ')' . ':' type '{' func_body '}'

    ':'  shift, and go to state 129


State 125

   38 func_par_decl: . %empty  [')', ',']
   39              | . IDENTIFIER
   40              | . IDENTIFIER '[' ']'
   41              | . IDENTIFIER '[' ']' ':' type func_par_decl
   42              | . IDENTIFIER ':' type func_par_decl
   43              | . func_par_decl ',' func_par_decl
   43              | func_par_decl ',' . func_par_decl

    IDENTIFIER  shift, and go to state 116

    $default  reduce using rule 38 (func_par_decl)

    func_par_decl  go to state 130


State 126

   58 decl: IDENTIFIER ARRAY ASSIGN data decl .

    $default  reduce using rule 58 (decl)


State 127

   38 func_par_decl: . %empty  [')', ',']
   39              | . IDENTIFIER
   40              | . IDENTIFIER '[' ']'
   41              | . IDENTIFIER '[' ']' ':' type func_par_decl
   42              | . IDENTIFIER ':' type func_par_decl
   42              | IDENTIFIER ':' type . func_par_decl
   43              | . func_par_decl ',' func_par_decl

    IDENTIFIER  shift, and go to state 116

    $default  reduce using rule 38 (func_par_decl)

    func_par_decl  go to state 131


State 128

   40 func_par_decl: IDENTIFIER '[' ']' .  [')', ',']
   41              | IDENTIFIER '[' ']' . ':' type func_par_decl

    ':'  shift, and go to state 132

    $default  reduce using rule 40 (func_par_decl)


State 129

   20 type: . KW_INT
   21     | . KW_REAL
   22     | . KW_BOOL
   23     | . KW_STRING
   24     | . "[]" type
   32 func_decl: KW_CONST IDENTIFIER ASSIGN '(' func_par_decl ')' ':' . type '{' func_body '}'

    KW_INT     shift, and go to state 82
    KW_REAL    shift, and go to state 83
    KW_BOOL    shift, and go to state 84
    KW_STRING  shift, and go to state 85
    "[]"       shift, and go to state 86

    type  go to state 133


State 130

   43 func_par_decl: func_par_decl . ',' func_par_decl
   43              | func_par_decl ',' func_par_decl .  [')', ',']

    ','  shift, and go to state 125

    ','       [reduce using rule 43 (func_par_decl)]
    $default  reduce using rule 43 (func_par_decl)


State 131

   42 func_par_decl: IDENTIFIER ':' type func_par_decl .  [')', ',']
   43              | func_par_decl . ',' func_par_decl

    ','  shift, and go to state 125

    ','       [reduce using rule 42 (func_par_decl)]
    $default  reduce using rule 42 (func_par_decl)


State 132

   20 type: . KW_INT
   21     | . KW_REAL
   22     | . KW_BOOL
   23     | . KW_STRING
   24     | . "[]" type
   41 func_par_decl: IDENTIFIER '[' ']' ':' . type func_par_decl

    KW_INT     shift, and go to state 82
    KW_REAL    shift, and go to state 83
    KW_BOOL    shift, and go to state 84
    KW_STRING  shift, and go to state 85
    "[]"       shift, and go to state 86

    type  go to state 134


State 133

   32 func_decl: KW_CONST IDENTIFIER ASSIGN '(' func_par_decl ')' ':' type . '{' func_body '}'

    '{'  shift, and go to state 135


State 134

   38 func_par_decl: . %empty  [')', ',']
   39              | . IDENTIFIER
   40              | . IDENTIFIER '[' ']'
   41              | . IDENTIFIER '[' ']' ':' type func_par_decl
   41              | IDENTIFIER '[' ']' ':' type . func_par_decl
   42              | . IDENTIFIER ':' type func_par_decl
   43              | . func_par_decl ',' func_par_decl

    IDENTIFIER  shift, and go to state 116

    $default  reduce using rule 38 (func_par_decl)

    func_par_decl  go to state 136


State 135

    9 commands: . func_call ';'
   10         | . IDENTIFIER ASSIGN expr ';'
   11         | . return_expr ';'
   12         | . KW_IF if_state KW_FI
   13         | . KW_WHILE expr KW_LOOP while_state KW_POOL
   29 func_body: . %empty  ['}']
   30          | . KW_LET decl ';' func_body
   31          | . commands func_body
   32 func_decl: KW_CONST IDENTIFIER ASSIGN '(' func_par_decl ')' ':' type '{' . func_body '}'
   33 func_call: . IDENTIFIER '(' func_param ')'
   37 return_expr: . KW_RETURN expr

    IDENTIFIER  shift, and go to state 3
    KW_IF       shift, and go to state 4
    KW_WHILE    shift, and go to state 5
    KW_LET      shift, and go to state 137
    KW_RETURN   shift, and go to state 8

    $default  reduce using rule 29 (func_body)

    commands     go to state 138
    func_body    go to state 139
    func_call    go to state 12
    return_expr  go to state 13


State 136

   41 func_par_decl: IDENTIFIER '[' ']' ':' type func_par_decl .  [')', ',']
   43              | func_par_decl . ',' func_par_decl

    ','  shift, and go to state 125

    ','       [reduce using rule 41 (func_par_decl)]
    $default  reduce using rule 41 (func_par_decl)


State 137

   30 func_body: KW_LET . decl ';' func_body
   54 decl: . %empty  [';']
   55     | . ',' decl
   56     | . IDENTIFIER decl
   57     | . IDENTIFIER ARRAY decl
   58     | . IDENTIFIER ARRAY ASSIGN data decl
   59     | . IDENTIFIER ASSIGN data decl
   60     | . ':' type

    IDENTIFIER  shift, and go to state 38
    ':'         shift, and go to state 39
    ','         shift, and go to state 40

    $default  reduce using rule 54 (decl)

    decl  go to state 140


State 138

    9 commands: . func_call ';'
   10         | . IDENTIFIER ASSIGN expr ';'
   11         | . return_expr ';'
   12         | . KW_IF if_state KW_FI
   13         | . KW_WHILE expr KW_LOOP while_state KW_POOL
   29 func_body: . %empty  ['}']
   30          | . KW_LET decl ';' func_body
   31          | . commands func_body
   31          | commands . func_body
   33 func_call: . IDENTIFIER '(' func_param ')'
   37 return_expr: . KW_RETURN expr

    IDENTIFIER  shift, and go to state 3
    KW_IF       shift, and go to state 4
    KW_WHILE    shift, and go to state 5
    KW_LET      shift, and go to state 137
    KW_RETURN   shift, and go to state 8

    $default  reduce using rule 29 (func_body)

    commands     go to state 138
    func_body    go to state 141
    func_call    go to state 12
    return_expr  go to state 13


State 139

   32 func_decl: KW_CONST IDENTIFIER ASSIGN '(' func_par_decl ')' ':' type '{' func_body . '}'

    '}'  shift, and go to state 142


State 140

   30 func_body: KW_LET decl . ';' func_body

    ';'  shift, and go to state 143


State 141

   31 func_body: commands func_body .

    $default  reduce using rule 31 (func_body)


State 142

   32 func_decl: KW_CONST IDENTIFIER ASSIGN '(' func_par_decl ')' ':' type '{' func_body '}' .

    $default  reduce using rule 32 (func_decl)


State 143

    9 commands: . func_call ';'
   10         | . IDENTIFIER ASSIGN expr ';'
   11         | . return_expr ';'
   12         | . KW_IF if_state KW_FI
   13         | . KW_WHILE expr KW_LOOP while_state KW_POOL
   29 func_body: . %empty  ['}']
   30          | . KW_LET decl ';' func_body
   30          | KW_LET decl ';' . func_body
   31          | . commands func_body
   33 func_call: . IDENTIFIER '(' func_param ')'
   37 return_expr: . KW_RETURN expr

    IDENTIFIER  shift, and go to state 3
    KW_IF       shift, and go to state 4
    KW_WHILE    shift, and go to state 5
    KW_LET      shift, and go to state 137
    KW_RETURN   shift, and go to state 8

    $default  reduce using rule 29 (func_body)

    commands     go to state 138
    func_body    go to state 144
    func_call    go to state 12
    return_expr  go to state 13


State 144

   30 func_body: KW_LET decl ';' func_body .

    $default  reduce using rule 30 (func_body)
