Terminals unused in grammar

   KW_IF
   KW_THEN
   KW_ELSE
   KW_AND
   KW_OR
   KW_NOT
   KW_NOT_EQL
   KW_LESS_EQL
   KW_FI
   KW_WHILE
   KW_LOOP
   KW_POOL
   KW_START


State 72 conflicts: 1 shift/reduce
State 74 conflicts: 1 shift/reduce
State 76 conflicts: 1 shift/reduce


Grammar

    0 $accept: input $end

    1 input: %empty
    2      | input body ';'

    3 body: KW_LET decl
    4     | KW_CONST decl_const
    5     | expr
    6     | func_decl

    7 type: KW_INT
    8     | KW_REAL
    9     | KW_BOOL
   10     | KW_STRING
   11     | "[]" type

   12 const_type: KW_INT
   13           | KW_REAL
   14           | KW_BOOL
   15           | KW_STRING

   16 func_decl: KW_CONST IDENTIFIER ASSIGN '(' func_par_decl ')' ':' type '{' return_expr '}'

   17 return_expr: %empty
   18            | KW_RETURN expr ';'

   19 func_par_decl: %empty
   20              | IDENTIFIER "[]" ':' type func_par_decl
   21              | IDENTIFIER ':' type func_par_decl
   22              | func_par_decl ',' func_par_decl

   23 data: POSINT
   24     | REAL
   25     | STRING
   26     | KW_TRUE
   27     | KW_FALSE
   28     | ARRAY

   29 decl_const: ',' decl_const
   30           | IDENTIFIER ASSIGN data decl_const
   31           | ':' const_type

   32 decl: ',' decl
   33     | IDENTIFIER decl
   34     | IDENTIFIER ARRAY decl
   35     | IDENTIFIER ASSIGN data decl
   36     | ':' type

   37 expr: POSINT
   38     | REAL
   39     | IDENTIFIER
   40     | '(' expr ')'
   41     | expr '+' expr
   42     | expr '-' expr
   43     | expr '*' expr
   44     | expr '/' expr


Terminals, with rules where they appear

$end (0) 0
'(' (40) 16 40
')' (41) 16 40
'*' (42) 43
'+' (43) 41
',' (44) 22 29 32
'-' (45) 42
'/' (47) 44
':' (58) 16 20 21 31 36
';' (59) 2 18
'{' (123) 16
'}' (125) 16
error (256)
IDENTIFIER (258) 16 20 21 30 33 34 35 39
POSINT (259) 23 37
REAL (260) 24 38
STRING (261) 25
ARRAY (262) 28 34
ASSIGN (263) 16 30 35
KW_INT (264) 7 12
KW_REAL (265) 8 13
KW_BOOL (266) 9 14
KW_STRING (267) 10 15
KW_IF (268)
KW_THEN (269)
KW_ELSE (270)
KW_AND (271)
KW_OR (272)
KW_NOT (273)
KW_NOT_EQL (274)
KW_LESS_EQL (275)
KW_FI (276)
KW_WHILE (277)
KW_LOOP (278)
KW_POOL (279)
KW_CONST (280) 4 16
KW_LET (281) 3
KW_RETURN (282) 18
KW_START (283)
KW_TRUE (284) 26
KW_FALSE (285) 27
"[]" (286) 11 20


Nonterminals, with rules where they appear

$accept (43)
    on left: 0
input (44)
    on left: 1 2, on right: 0 2
body (45)
    on left: 3 4 5 6, on right: 2
type (46)
    on left: 7 8 9 10 11, on right: 11 16 20 21 36
const_type (47)
    on left: 12 13 14 15, on right: 31
func_decl (48)
    on left: 16, on right: 6
return_expr (49)
    on left: 17 18, on right: 16
func_par_decl (50)
    on left: 19 20 21 22, on right: 16 20 21 22
data (51)
    on left: 23 24 25 26 27 28, on right: 30 35
decl_const (52)
    on left: 29 30 31, on right: 4 29 30
decl (53)
    on left: 32 33 34 35 36, on right: 3 32 33 34 35
expr (54)
    on left: 37 38 39 40 41 42 43 44, on right: 5 18 40 41 42 43 44


State 0

    0 $accept: . input $end
    1 input: . %empty
    2      | . input body ';'

    $default  reduce using rule 1 (input)

    input  go to state 1


State 1

    0 $accept: input . $end
    2 input: input . body ';'
    3 body: . KW_LET decl
    4     | . KW_CONST decl_const
    5     | . expr
    6     | . func_decl
   16 func_decl: . KW_CONST IDENTIFIER ASSIGN '(' func_par_decl ')' ':' type '{' return_expr '}'
   37 expr: . POSINT
   38     | . REAL
   39     | . IDENTIFIER
   40     | . '(' expr ')'
   41     | . expr '+' expr
   42     | . expr '-' expr
   43     | . expr '*' expr
   44     | . expr '/' expr

    $end        shift, and go to state 2
    IDENTIFIER  shift, and go to state 3
    POSINT      shift, and go to state 4
    REAL        shift, and go to state 5
    KW_CONST    shift, and go to state 6
    KW_LET      shift, and go to state 7
    '('         shift, and go to state 8

    body       go to state 9
    func_decl  go to state 10
    expr       go to state 11


State 2

    0 $accept: input $end .

    $default  accept


State 3

   39 expr: IDENTIFIER .

    $default  reduce using rule 39 (expr)


State 4

   37 expr: POSINT .

    $default  reduce using rule 37 (expr)


State 5

   38 expr: REAL .

    $default  reduce using rule 38 (expr)


State 6

    4 body: KW_CONST . decl_const
   16 func_decl: KW_CONST . IDENTIFIER ASSIGN '(' func_par_decl ')' ':' type '{' return_expr '}'
   29 decl_const: . ',' decl_const
   30           | . IDENTIFIER ASSIGN data decl_const
   31           | . ':' const_type

    IDENTIFIER  shift, and go to state 12
    ':'         shift, and go to state 13
    ','         shift, and go to state 14

    decl_const  go to state 15


State 7

    3 body: KW_LET . decl
   32 decl: . ',' decl
   33     | . IDENTIFIER decl
   34     | . IDENTIFIER ARRAY decl
   35     | . IDENTIFIER ASSIGN data decl
   36     | . ':' type

    IDENTIFIER  shift, and go to state 16
    ':'         shift, and go to state 17
    ','         shift, and go to state 18

    decl  go to state 19


State 8

   37 expr: . POSINT
   38     | . REAL
   39     | . IDENTIFIER
   40     | . '(' expr ')'
   40     | '(' . expr ')'
   41     | . expr '+' expr
   42     | . expr '-' expr
   43     | . expr '*' expr
   44     | . expr '/' expr

    IDENTIFIER  shift, and go to state 3
    POSINT      shift, and go to state 4
    REAL        shift, and go to state 5
    '('         shift, and go to state 8

    expr  go to state 20


State 9

    2 input: input body . ';'

    ';'  shift, and go to state 21


State 10

    6 body: func_decl .

    $default  reduce using rule 6 (body)


State 11

    5 body: expr .  [';']
   41 expr: expr . '+' expr
   42     | expr . '-' expr
   43     | expr . '*' expr
   44     | expr . '/' expr

    '-'  shift, and go to state 22
    '+'  shift, and go to state 23
    '*'  shift, and go to state 24
    '/'  shift, and go to state 25

    $default  reduce using rule 5 (body)


State 12

   16 func_decl: KW_CONST IDENTIFIER . ASSIGN '(' func_par_decl ')' ':' type '{' return_expr '}'
   30 decl_const: IDENTIFIER . ASSIGN data decl_const

    ASSIGN  shift, and go to state 26


State 13

   12 const_type: . KW_INT
   13           | . KW_REAL
   14           | . KW_BOOL
   15           | . KW_STRING
   31 decl_const: ':' . const_type

    KW_INT     shift, and go to state 27
    KW_REAL    shift, and go to state 28
    KW_BOOL    shift, and go to state 29
    KW_STRING  shift, and go to state 30

    const_type  go to state 31


State 14

   29 decl_const: . ',' decl_const
   29           | ',' . decl_const
   30           | . IDENTIFIER ASSIGN data decl_const
   31           | . ':' const_type

    IDENTIFIER  shift, and go to state 32
    ':'         shift, and go to state 13
    ','         shift, and go to state 14

    decl_const  go to state 33


State 15

    4 body: KW_CONST decl_const .

    $default  reduce using rule 4 (body)


State 16

   32 decl: . ',' decl
   33     | . IDENTIFIER decl
   33     | IDENTIFIER . decl
   34     | . IDENTIFIER ARRAY decl
   34     | IDENTIFIER . ARRAY decl
   35     | . IDENTIFIER ASSIGN data decl
   35     | IDENTIFIER . ASSIGN data decl
   36     | . ':' type

    IDENTIFIER  shift, and go to state 16
    ARRAY       shift, and go to state 34
    ASSIGN      shift, and go to state 35
    ':'         shift, and go to state 17
    ','         shift, and go to state 18

    decl  go to state 36


State 17

    7 type: . KW_INT
    8     | . KW_REAL
    9     | . KW_BOOL
   10     | . KW_STRING
   11     | . "[]" type
   36 decl: ':' . type

    KW_INT     shift, and go to state 37
    KW_REAL    shift, and go to state 38
    KW_BOOL    shift, and go to state 39
    KW_STRING  shift, and go to state 40
    "[]"       shift, and go to state 41

    type  go to state 42


State 18

   32 decl: . ',' decl
   32     | ',' . decl
   33     | . IDENTIFIER decl
   34     | . IDENTIFIER ARRAY decl
   35     | . IDENTIFIER ASSIGN data decl
   36     | . ':' type

    IDENTIFIER  shift, and go to state 16
    ':'         shift, and go to state 17
    ','         shift, and go to state 18

    decl  go to state 43


State 19

    3 body: KW_LET decl .

    $default  reduce using rule 3 (body)


State 20

   40 expr: '(' expr . ')'
   41     | expr . '+' expr
   42     | expr . '-' expr
   43     | expr . '*' expr
   44     | expr . '/' expr

    '-'  shift, and go to state 22
    '+'  shift, and go to state 23
    '*'  shift, and go to state 24
    '/'  shift, and go to state 25
    ')'  shift, and go to state 44


State 21

    2 input: input body ';' .

    $default  reduce using rule 2 (input)


State 22

   37 expr: . POSINT
   38     | . REAL
   39     | . IDENTIFIER
   40     | . '(' expr ')'
   41     | . expr '+' expr
   42     | . expr '-' expr
   42     | expr '-' . expr
   43     | . expr '*' expr
   44     | . expr '/' expr

    IDENTIFIER  shift, and go to state 3
    POSINT      shift, and go to state 4
    REAL        shift, and go to state 5
    '('         shift, and go to state 8

    expr  go to state 45


State 23

   37 expr: . POSINT
   38     | . REAL
   39     | . IDENTIFIER
   40     | . '(' expr ')'
   41     | . expr '+' expr
   41     | expr '+' . expr
   42     | . expr '-' expr
   43     | . expr '*' expr
   44     | . expr '/' expr

    IDENTIFIER  shift, and go to state 3
    POSINT      shift, and go to state 4
    REAL        shift, and go to state 5
    '('         shift, and go to state 8

    expr  go to state 46


State 24

   37 expr: . POSINT
   38     | . REAL
   39     | . IDENTIFIER
   40     | . '(' expr ')'
   41     | . expr '+' expr
   42     | . expr '-' expr
   43     | . expr '*' expr
   43     | expr '*' . expr
   44     | . expr '/' expr

    IDENTIFIER  shift, and go to state 3
    POSINT      shift, and go to state 4
    REAL        shift, and go to state 5
    '('         shift, and go to state 8

    expr  go to state 47


State 25

   37 expr: . POSINT
   38     | . REAL
   39     | . IDENTIFIER
   40     | . '(' expr ')'
   41     | . expr '+' expr
   42     | . expr '-' expr
   43     | . expr '*' expr
   44     | . expr '/' expr
   44     | expr '/' . expr

    IDENTIFIER  shift, and go to state 3
    POSINT      shift, and go to state 4
    REAL        shift, and go to state 5
    '('         shift, and go to state 8

    expr  go to state 48


State 26

   16 func_decl: KW_CONST IDENTIFIER ASSIGN . '(' func_par_decl ')' ':' type '{' return_expr '}'
   23 data: . POSINT
   24     | . REAL
   25     | . STRING
   26     | . KW_TRUE
   27     | . KW_FALSE
   28     | . ARRAY
   30 decl_const: IDENTIFIER ASSIGN . data decl_const

    POSINT    shift, and go to state 49
    REAL      shift, and go to state 50
    STRING    shift, and go to state 51
    ARRAY     shift, and go to state 52
    KW_TRUE   shift, and go to state 53
    KW_FALSE  shift, and go to state 54
    '('       shift, and go to state 55

    data  go to state 56


State 27

   12 const_type: KW_INT .

    $default  reduce using rule 12 (const_type)


State 28

   13 const_type: KW_REAL .

    $default  reduce using rule 13 (const_type)


State 29

   14 const_type: KW_BOOL .

    $default  reduce using rule 14 (const_type)


State 30

   15 const_type: KW_STRING .

    $default  reduce using rule 15 (const_type)


State 31

   31 decl_const: ':' const_type .

    $default  reduce using rule 31 (decl_const)


State 32

   30 decl_const: IDENTIFIER . ASSIGN data decl_const

    ASSIGN  shift, and go to state 57


State 33

   29 decl_const: ',' decl_const .

    $default  reduce using rule 29 (decl_const)


State 34

   32 decl: . ',' decl
   33     | . IDENTIFIER decl
   34     | . IDENTIFIER ARRAY decl
   34     | IDENTIFIER ARRAY . decl
   35     | . IDENTIFIER ASSIGN data decl
   36     | . ':' type

    IDENTIFIER  shift, and go to state 16
    ':'         shift, and go to state 17
    ','         shift, and go to state 18

    decl  go to state 58


State 35

   23 data: . POSINT
   24     | . REAL
   25     | . STRING
   26     | . KW_TRUE
   27     | . KW_FALSE
   28     | . ARRAY
   35 decl: IDENTIFIER ASSIGN . data decl

    POSINT    shift, and go to state 49
    REAL      shift, and go to state 50
    STRING    shift, and go to state 51
    ARRAY     shift, and go to state 52
    KW_TRUE   shift, and go to state 53
    KW_FALSE  shift, and go to state 54

    data  go to state 59


State 36

   33 decl: IDENTIFIER decl .

    $default  reduce using rule 33 (decl)


State 37

    7 type: KW_INT .

    $default  reduce using rule 7 (type)


State 38

    8 type: KW_REAL .

    $default  reduce using rule 8 (type)


State 39

    9 type: KW_BOOL .

    $default  reduce using rule 9 (type)


State 40

   10 type: KW_STRING .

    $default  reduce using rule 10 (type)


State 41

    7 type: . KW_INT
    8     | . KW_REAL
    9     | . KW_BOOL
   10     | . KW_STRING
   11     | . "[]" type
   11     | "[]" . type

    KW_INT     shift, and go to state 37
    KW_REAL    shift, and go to state 38
    KW_BOOL    shift, and go to state 39
    KW_STRING  shift, and go to state 40
    "[]"       shift, and go to state 41

    type  go to state 60


State 42

   36 decl: ':' type .

    $default  reduce using rule 36 (decl)


State 43

   32 decl: ',' decl .

    $default  reduce using rule 32 (decl)


State 44

   40 expr: '(' expr ')' .

    $default  reduce using rule 40 (expr)


State 45

   41 expr: expr . '+' expr
   42     | expr . '-' expr
   42     | expr '-' expr .  ['-', '+', ';', ')']
   43     | expr . '*' expr
   44     | expr . '/' expr

    '*'  shift, and go to state 24
    '/'  shift, and go to state 25

    $default  reduce using rule 42 (expr)

    Conflict between rule 42 and token '-' resolved as reduce (%left '-').
    Conflict between rule 42 and token '+' resolved as reduce (%left '+').
    Conflict between rule 42 and token '*' resolved as shift ('-' < '*').
    Conflict between rule 42 and token '/' resolved as shift ('-' < '/').


State 46

   41 expr: expr . '+' expr
   41     | expr '+' expr .  ['-', '+', ';', ')']
   42     | expr . '-' expr
   43     | expr . '*' expr
   44     | expr . '/' expr

    '*'  shift, and go to state 24
    '/'  shift, and go to state 25

    $default  reduce using rule 41 (expr)

    Conflict between rule 41 and token '-' resolved as reduce (%left '-').
    Conflict between rule 41 and token '+' resolved as reduce (%left '+').
    Conflict between rule 41 and token '*' resolved as shift ('+' < '*').
    Conflict between rule 41 and token '/' resolved as shift ('+' < '/').


State 47

   41 expr: expr . '+' expr
   42     | expr . '-' expr
   43     | expr . '*' expr
   43     | expr '*' expr .  ['-', '+', '*', '/', ';', ')']
   44     | expr . '/' expr

    $default  reduce using rule 43 (expr)

    Conflict between rule 43 and token '-' resolved as reduce ('-' < '*').
    Conflict between rule 43 and token '+' resolved as reduce ('+' < '*').
    Conflict between rule 43 and token '*' resolved as reduce (%left '*').
    Conflict between rule 43 and token '/' resolved as reduce (%left '/').


State 48

   41 expr: expr . '+' expr
   42     | expr . '-' expr
   43     | expr . '*' expr
   44     | expr . '/' expr
   44     | expr '/' expr .  ['-', '+', '*', '/', ';', ')']

    $default  reduce using rule 44 (expr)

    Conflict between rule 44 and token '-' resolved as reduce ('-' < '/').
    Conflict between rule 44 and token '+' resolved as reduce ('+' < '/').
    Conflict between rule 44 and token '*' resolved as reduce (%left '*').
    Conflict between rule 44 and token '/' resolved as reduce (%left '/').


State 49

   23 data: POSINT .

    $default  reduce using rule 23 (data)


State 50

   24 data: REAL .

    $default  reduce using rule 24 (data)


State 51

   25 data: STRING .

    $default  reduce using rule 25 (data)


State 52

   28 data: ARRAY .

    $default  reduce using rule 28 (data)


State 53

   26 data: KW_TRUE .

    $default  reduce using rule 26 (data)


State 54

   27 data: KW_FALSE .

    $default  reduce using rule 27 (data)


State 55

   16 func_decl: KW_CONST IDENTIFIER ASSIGN '(' . func_par_decl ')' ':' type '{' return_expr '}'
   19 func_par_decl: . %empty  [')', ',']
   20              | . IDENTIFIER "[]" ':' type func_par_decl
   21              | . IDENTIFIER ':' type func_par_decl
   22              | . func_par_decl ',' func_par_decl

    IDENTIFIER  shift, and go to state 61

    $default  reduce using rule 19 (func_par_decl)

    func_par_decl  go to state 62


State 56

   29 decl_const: . ',' decl_const
   30           | . IDENTIFIER ASSIGN data decl_const
   30           | IDENTIFIER ASSIGN data . decl_const
   31           | . ':' const_type

    IDENTIFIER  shift, and go to state 32
    ':'         shift, and go to state 13
    ','         shift, and go to state 14

    decl_const  go to state 63


State 57

   23 data: . POSINT
   24     | . REAL
   25     | . STRING
   26     | . KW_TRUE
   27     | . KW_FALSE
   28     | . ARRAY
   30 decl_const: IDENTIFIER ASSIGN . data decl_const

    POSINT    shift, and go to state 49
    REAL      shift, and go to state 50
    STRING    shift, and go to state 51
    ARRAY     shift, and go to state 52
    KW_TRUE   shift, and go to state 53
    KW_FALSE  shift, and go to state 54

    data  go to state 56


State 58

   34 decl: IDENTIFIER ARRAY decl .

    $default  reduce using rule 34 (decl)


State 59

   32 decl: . ',' decl
   33     | . IDENTIFIER decl
   34     | . IDENTIFIER ARRAY decl
   35     | . IDENTIFIER ASSIGN data decl
   35     | IDENTIFIER ASSIGN data . decl
   36     | . ':' type

    IDENTIFIER  shift, and go to state 16
    ':'         shift, and go to state 17
    ','         shift, and go to state 18

    decl  go to state 64


State 60

   11 type: "[]" type .

    $default  reduce using rule 11 (type)


State 61

   20 func_par_decl: IDENTIFIER . "[]" ':' type func_par_decl
   21              | IDENTIFIER . ':' type func_par_decl

    "[]"  shift, and go to state 65
    ':'   shift, and go to state 66


State 62

   16 func_decl: KW_CONST IDENTIFIER ASSIGN '(' func_par_decl . ')' ':' type '{' return_expr '}'
   22 func_par_decl: func_par_decl . ',' func_par_decl

    ')'  shift, and go to state 67
    ','  shift, and go to state 68


State 63

   30 decl_const: IDENTIFIER ASSIGN data decl_const .

    $default  reduce using rule 30 (decl_const)


State 64

   35 decl: IDENTIFIER ASSIGN data decl .

    $default  reduce using rule 35 (decl)


State 65

   20 func_par_decl: IDENTIFIER "[]" . ':' type func_par_decl

    ':'  shift, and go to state 69


State 66

    7 type: . KW_INT
    8     | . KW_REAL
    9     | . KW_BOOL
   10     | . KW_STRING
   11     | . "[]" type
   21 func_par_decl: IDENTIFIER ':' . type func_par_decl

    KW_INT     shift, and go to state 37
    KW_REAL    shift, and go to state 38
    KW_BOOL    shift, and go to state 39
    KW_STRING  shift, and go to state 40
    "[]"       shift, and go to state 41

    type  go to state 70


State 67

   16 func_decl: KW_CONST IDENTIFIER ASSIGN '(' func_par_decl ')' . ':' type '{' return_expr '}'

    ':'  shift, and go to state 71


State 68

   19 func_par_decl: . %empty  [')', ',']
   20              | . IDENTIFIER "[]" ':' type func_par_decl
   21              | . IDENTIFIER ':' type func_par_decl
   22              | . func_par_decl ',' func_par_decl
   22              | func_par_decl ',' . func_par_decl

    IDENTIFIER  shift, and go to state 61

    $default  reduce using rule 19 (func_par_decl)

    func_par_decl  go to state 72


State 69

    7 type: . KW_INT
    8     | . KW_REAL
    9     | . KW_BOOL
   10     | . KW_STRING
   11     | . "[]" type
   20 func_par_decl: IDENTIFIER "[]" ':' . type func_par_decl

    KW_INT     shift, and go to state 37
    KW_REAL    shift, and go to state 38
    KW_BOOL    shift, and go to state 39
    KW_STRING  shift, and go to state 40
    "[]"       shift, and go to state 41

    type  go to state 73


State 70

   19 func_par_decl: . %empty  [')', ',']
   20              | . IDENTIFIER "[]" ':' type func_par_decl
   21              | . IDENTIFIER ':' type func_par_decl
   21              | IDENTIFIER ':' type . func_par_decl
   22              | . func_par_decl ',' func_par_decl

    IDENTIFIER  shift, and go to state 61

    $default  reduce using rule 19 (func_par_decl)

    func_par_decl  go to state 74


State 71

    7 type: . KW_INT
    8     | . KW_REAL
    9     | . KW_BOOL
   10     | . KW_STRING
   11     | . "[]" type
   16 func_decl: KW_CONST IDENTIFIER ASSIGN '(' func_par_decl ')' ':' . type '{' return_expr '}'

    KW_INT     shift, and go to state 37
    KW_REAL    shift, and go to state 38
    KW_BOOL    shift, and go to state 39
    KW_STRING  shift, and go to state 40
    "[]"       shift, and go to state 41

    type  go to state 75


State 72

   22 func_par_decl: func_par_decl . ',' func_par_decl
   22              | func_par_decl ',' func_par_decl .  [')', ',']

    ','  shift, and go to state 68

    ','       [reduce using rule 22 (func_par_decl)]
    $default  reduce using rule 22 (func_par_decl)


State 73

   19 func_par_decl: . %empty  [')', ',']
   20              | . IDENTIFIER "[]" ':' type func_par_decl
   20              | IDENTIFIER "[]" ':' type . func_par_decl
   21              | . IDENTIFIER ':' type func_par_decl
   22              | . func_par_decl ',' func_par_decl

    IDENTIFIER  shift, and go to state 61

    $default  reduce using rule 19 (func_par_decl)

    func_par_decl  go to state 76


State 74

   21 func_par_decl: IDENTIFIER ':' type func_par_decl .  [')', ',']
   22              | func_par_decl . ',' func_par_decl

    ','  shift, and go to state 68

    ','       [reduce using rule 21 (func_par_decl)]
    $default  reduce using rule 21 (func_par_decl)


State 75

   16 func_decl: KW_CONST IDENTIFIER ASSIGN '(' func_par_decl ')' ':' type . '{' return_expr '}'

    '{'  shift, and go to state 77


State 76

   20 func_par_decl: IDENTIFIER "[]" ':' type func_par_decl .  [')', ',']
   22              | func_par_decl . ',' func_par_decl

    ','  shift, and go to state 68

    ','       [reduce using rule 20 (func_par_decl)]
    $default  reduce using rule 20 (func_par_decl)


State 77

   16 func_decl: KW_CONST IDENTIFIER ASSIGN '(' func_par_decl ')' ':' type '{' . return_expr '}'
   17 return_expr: . %empty  ['}']
   18            | . KW_RETURN expr ';'

    KW_RETURN  shift, and go to state 78

    $default  reduce using rule 17 (return_expr)

    return_expr  go to state 79


State 78

   18 return_expr: KW_RETURN . expr ';'
   37 expr: . POSINT
   38     | . REAL
   39     | . IDENTIFIER
   40     | . '(' expr ')'
   41     | . expr '+' expr
   42     | . expr '-' expr
   43     | . expr '*' expr
   44     | . expr '/' expr

    IDENTIFIER  shift, and go to state 3
    POSINT      shift, and go to state 4
    REAL        shift, and go to state 5
    '('         shift, and go to state 8

    expr  go to state 80


State 79

   16 func_decl: KW_CONST IDENTIFIER ASSIGN '(' func_par_decl ')' ':' type '{' return_expr . '}'

    '}'  shift, and go to state 81


State 80

   18 return_expr: KW_RETURN expr . ';'
   41 expr: expr . '+' expr
   42     | expr . '-' expr
   43     | expr . '*' expr
   44     | expr . '/' expr

    '-'  shift, and go to state 22
    '+'  shift, and go to state 23
    '*'  shift, and go to state 24
    '/'  shift, and go to state 25
    ';'  shift, and go to state 82


State 81

   16 func_decl: KW_CONST IDENTIFIER ASSIGN '(' func_par_decl ')' ':' type '{' return_expr '}' .

    $default  reduce using rule 16 (func_decl)


State 82

   18 return_expr: KW_RETURN expr ';' .

    $default  reduce using rule 18 (return_expr)
