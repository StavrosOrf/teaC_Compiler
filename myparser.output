Terminals unused in grammar

   KW_IF
   KW_THEN
   KW_ELSE
   KW_FI
   KW_WHILE
   KW_LOOP
   KW_POOL
   KW_START


State 7 conflicts: 1 shift/reduce
State 26 conflicts: 11 shift/reduce
State 62 conflicts: 11 shift/reduce
State 92 conflicts: 1 shift/reduce
State 93 conflicts: 1 shift/reduce
State 98 conflicts: 1 shift/reduce
State 107 conflicts: 1 shift/reduce


Grammar

    0 $accept: input $end

    1 input: %empty
    2      | input body

    3 body: KW_LET decl ';'
    4     | KW_CONST decl_const ';'
    5     | expr ';'
    6     | func_decl
    7     | KW_CONST defined_func

    8 defined_func: %empty

    9 type: KW_INT
   10     | KW_REAL
   11     | KW_BOOL
   12     | KW_STRING
   13     | "[]" type

   14 const_type: KW_INT
   15           | KW_REAL
   16           | KW_BOOL
   17           | KW_STRING

   18 func_body: %empty
   19          | KW_LET decl
   20          | return_expr
   21          | func_body ';' func_body

   22 func_decl: KW_CONST IDENTIFIER ASSIGN '(' func_par_decl ')' ':' type '{' func_body '}'

   23 return_expr: KW_RETURN expr

   24 func_par_decl: %empty
   25              | IDENTIFIER
   26              | IDENTIFIER '[' ']'
   27              | IDENTIFIER '[' ']' ':' type func_par_decl
   28              | IDENTIFIER ':' type func_par_decl
   29              | func_par_decl ',' func_par_decl

   30 data: POSINT
   31     | REAL
   32     | STRING
   33     | KW_TRUE
   34     | KW_FALSE
   35     | ARRAY

   36 decl_const: ',' decl_const
   37           | IDENTIFIER ASSIGN data decl_const
   38           | IDENTIFIER ARRAY ASSIGN data decl_const
   39           | ':' const_type

   40 decl: %empty
   41     | ',' decl
   42     | IDENTIFIER decl
   43     | IDENTIFIER ARRAY decl
   44     | IDENTIFIER ARRAY ASSIGN data decl
   45     | IDENTIFIER ASSIGN data decl
   46     | ':' type

   47 infix_operator: '+'
   48               | '-'
   49               | '*'
   50               | '/'
   51               | '%'
   52               | '='
   53               | '<'
   54               | KW_NOT_EQL
   55               | KW_LESS_EQL
   56               | KW_OR
   57               | KW_AND

   58 prefix_operator: '+'
   59                | '-'
   60                | KW_NOT

   61 expr: POSINT
   62     | REAL
   63     | IDENTIFIER
   64     | '(' expr ')'
   65     | expr infix_operator expr
   66     | prefix_operator expr


Terminals, with rules where they appear

$end (0) 0
'%' (37) 51
'(' (40) 22 64
')' (41) 22 64
'*' (42) 49
'+' (43) 47 58
',' (44) 29 36 41
'-' (45) 48 59
'/' (47) 50
':' (58) 22 27 28 39 46
';' (59) 3 4 5 21
'<' (60) 53
'=' (61) 52
'[' (91) 26 27
']' (93) 26 27
'{' (123) 22
'}' (125) 22
error (256)
IDENTIFIER (258) 22 25 26 27 28 37 38 42 43 44 45 63
POSINT (259) 30 61
REAL (260) 31 62
STRING (261) 32
ARRAY (262) 35 38 43 44
ASSIGN (263) 22 37 38 44 45
KW_INT (264) 9 14
KW_REAL (265) 10 15
KW_BOOL (266) 11 16
KW_STRING (267) 12 17
KW_IF (268)
KW_THEN (269)
KW_ELSE (270)
KW_AND (271) 57
KW_OR (272) 56
KW_NOT (273) 60
KW_NOT_EQL (274) 54
KW_LESS_EQL (275) 55
KW_FI (276)
KW_WHILE (277)
KW_LOOP (278)
KW_POOL (279)
KW_CONST (280) 4 7 22
KW_LET (281) 3 19
KW_RETURN (282) 23
KW_START (283)
KW_TRUE (284) 33
KW_FALSE (285) 34
"[]" (286) 13


Nonterminals, with rules where they appear

$accept (48)
    on left: 0
input (49)
    on left: 1 2, on right: 0 2
body (50)
    on left: 3 4 5 6 7, on right: 2
defined_func (51)
    on left: 8, on right: 7
type (52)
    on left: 9 10 11 12 13, on right: 13 22 27 28 46
const_type (53)
    on left: 14 15 16 17, on right: 39
func_body (54)
    on left: 18 19 20 21, on right: 21 22
func_decl (55)
    on left: 22, on right: 6
return_expr (56)
    on left: 23, on right: 20
func_par_decl (57)
    on left: 24 25 26 27 28 29, on right: 22 27 28 29
data (58)
    on left: 30 31 32 33 34 35, on right: 37 38 44 45
decl_const (59)
    on left: 36 37 38 39, on right: 4 36 37 38
decl (60)
    on left: 40 41 42 43 44 45 46, on right: 3 19 41 42 43 44 45
infix_operator (61)
    on left: 47 48 49 50 51 52 53 54 55 56 57, on right: 65
prefix_operator (62)
    on left: 58 59 60, on right: 66
expr (63)
    on left: 61 62 63 64 65 66, on right: 5 23 64 65 66


State 0

    0 $accept: . input $end
    1 input: . %empty
    2      | . input body

    $default  reduce using rule 1 (input)

    input  go to state 1


State 1

    0 $accept: input . $end
    2 input: input . body
    3 body: . KW_LET decl ';'
    4     | . KW_CONST decl_const ';'
    5     | . expr ';'
    6     | . func_decl
    7     | . KW_CONST defined_func
   22 func_decl: . KW_CONST IDENTIFIER ASSIGN '(' func_par_decl ')' ':' type '{' func_body '}'
   58 prefix_operator: . '+'
   59                | . '-'
   60                | . KW_NOT
   61 expr: . POSINT
   62     | . REAL
   63     | . IDENTIFIER
   64     | . '(' expr ')'
   65     | . expr infix_operator expr
   66     | . prefix_operator expr

    $end        shift, and go to state 2
    IDENTIFIER  shift, and go to state 3
    POSINT      shift, and go to state 4
    REAL        shift, and go to state 5
    KW_NOT      shift, and go to state 6
    KW_CONST    shift, and go to state 7
    KW_LET      shift, and go to state 8
    '-'         shift, and go to state 9
    '+'         shift, and go to state 10
    '('         shift, and go to state 11

    body             go to state 12
    func_decl        go to state 13
    prefix_operator  go to state 14
    expr             go to state 15


State 2

    0 $accept: input $end .

    $default  accept


State 3

   63 expr: IDENTIFIER .

    $default  reduce using rule 63 (expr)


State 4

   61 expr: POSINT .

    $default  reduce using rule 61 (expr)


State 5

   62 expr: REAL .

    $default  reduce using rule 62 (expr)


State 6

   60 prefix_operator: KW_NOT .

    $default  reduce using rule 60 (prefix_operator)


State 7

    4 body: KW_CONST . decl_const ';'
    7     | KW_CONST . defined_func
    8 defined_func: . %empty  [$end, IDENTIFIER, POSINT, REAL, KW_NOT, KW_CONST, KW_LET, '-', '+', '(']
   22 func_decl: KW_CONST . IDENTIFIER ASSIGN '(' func_par_decl ')' ':' type '{' func_body '}'
   36 decl_const: . ',' decl_const
   37           | . IDENTIFIER ASSIGN data decl_const
   38           | . IDENTIFIER ARRAY ASSIGN data decl_const
   39           | . ':' const_type

    IDENTIFIER  shift, and go to state 16
    ':'         shift, and go to state 17
    ','         shift, and go to state 18

    IDENTIFIER  [reduce using rule 8 (defined_func)]
    $default    reduce using rule 8 (defined_func)

    defined_func  go to state 19
    decl_const    go to state 20


State 8

    3 body: KW_LET . decl ';'
   40 decl: . %empty  [';']
   41     | . ',' decl
   42     | . IDENTIFIER decl
   43     | . IDENTIFIER ARRAY decl
   44     | . IDENTIFIER ARRAY ASSIGN data decl
   45     | . IDENTIFIER ASSIGN data decl
   46     | . ':' type

    IDENTIFIER  shift, and go to state 21
    ':'         shift, and go to state 22
    ','         shift, and go to state 23

    $default  reduce using rule 40 (decl)

    decl  go to state 24


State 9

   59 prefix_operator: '-' .

    $default  reduce using rule 59 (prefix_operator)


State 10

   58 prefix_operator: '+' .

    $default  reduce using rule 58 (prefix_operator)


State 11

   58 prefix_operator: . '+'
   59                | . '-'
   60                | . KW_NOT
   61 expr: . POSINT
   62     | . REAL
   63     | . IDENTIFIER
   64     | . '(' expr ')'
   64     | '(' . expr ')'
   65     | . expr infix_operator expr
   66     | . prefix_operator expr

    IDENTIFIER  shift, and go to state 3
    POSINT      shift, and go to state 4
    REAL        shift, and go to state 5
    KW_NOT      shift, and go to state 6
    '-'         shift, and go to state 9
    '+'         shift, and go to state 10
    '('         shift, and go to state 11

    prefix_operator  go to state 14
    expr             go to state 25


State 12

    2 input: input body .

    $default  reduce using rule 2 (input)


State 13

    6 body: func_decl .

    $default  reduce using rule 6 (body)


State 14

   58 prefix_operator: . '+'
   59                | . '-'
   60                | . KW_NOT
   61 expr: . POSINT
   62     | . REAL
   63     | . IDENTIFIER
   64     | . '(' expr ')'
   65     | . expr infix_operator expr
   66     | . prefix_operator expr
   66     | prefix_operator . expr

    IDENTIFIER  shift, and go to state 3
    POSINT      shift, and go to state 4
    REAL        shift, and go to state 5
    KW_NOT      shift, and go to state 6
    '-'         shift, and go to state 9
    '+'         shift, and go to state 10
    '('         shift, and go to state 11

    prefix_operator  go to state 14
    expr             go to state 26


State 15

    5 body: expr . ';'
   47 infix_operator: . '+'
   48               | . '-'
   49               | . '*'
   50               | . '/'
   51               | . '%'
   52               | . '='
   53               | . '<'
   54               | . KW_NOT_EQL
   55               | . KW_LESS_EQL
   56               | . KW_OR
   57               | . KW_AND
   65 expr: expr . infix_operator expr

    KW_AND       shift, and go to state 27
    KW_OR        shift, and go to state 28
    KW_NOT_EQL   shift, and go to state 29
    KW_LESS_EQL  shift, and go to state 30
    '-'          shift, and go to state 31
    '+'          shift, and go to state 32
    '*'          shift, and go to state 33
    '/'          shift, and go to state 34
    ';'          shift, and go to state 35
    '%'          shift, and go to state 36
    '='          shift, and go to state 37
    '<'          shift, and go to state 38

    infix_operator  go to state 39


State 16

   22 func_decl: KW_CONST IDENTIFIER . ASSIGN '(' func_par_decl ')' ':' type '{' func_body '}'
   37 decl_const: IDENTIFIER . ASSIGN data decl_const
   38           | IDENTIFIER . ARRAY ASSIGN data decl_const

    ARRAY   shift, and go to state 40
    ASSIGN  shift, and go to state 41


State 17

   14 const_type: . KW_INT
   15           | . KW_REAL
   16           | . KW_BOOL
   17           | . KW_STRING
   39 decl_const: ':' . const_type

    KW_INT     shift, and go to state 42
    KW_REAL    shift, and go to state 43
    KW_BOOL    shift, and go to state 44
    KW_STRING  shift, and go to state 45

    const_type  go to state 46


State 18

   36 decl_const: . ',' decl_const
   36           | ',' . decl_const
   37           | . IDENTIFIER ASSIGN data decl_const
   38           | . IDENTIFIER ARRAY ASSIGN data decl_const
   39           | . ':' const_type

    IDENTIFIER  shift, and go to state 47
    ':'         shift, and go to state 17
    ','         shift, and go to state 18

    decl_const  go to state 48


State 19

    7 body: KW_CONST defined_func .

    $default  reduce using rule 7 (body)


State 20

    4 body: KW_CONST decl_const . ';'

    ';'  shift, and go to state 49


State 21

   40 decl: . %empty  [';', '}']
   41     | . ',' decl
   42     | . IDENTIFIER decl
   42     | IDENTIFIER . decl
   43     | . IDENTIFIER ARRAY decl
   43     | IDENTIFIER . ARRAY decl
   44     | . IDENTIFIER ARRAY ASSIGN data decl
   44     | IDENTIFIER . ARRAY ASSIGN data decl
   45     | . IDENTIFIER ASSIGN data decl
   45     | IDENTIFIER . ASSIGN data decl
   46     | . ':' type

    IDENTIFIER  shift, and go to state 21
    ARRAY       shift, and go to state 50
    ASSIGN      shift, and go to state 51
    ':'         shift, and go to state 22
    ','         shift, and go to state 23

    $default  reduce using rule 40 (decl)

    decl  go to state 52


State 22

    9 type: . KW_INT
   10     | . KW_REAL
   11     | . KW_BOOL
   12     | . KW_STRING
   13     | . "[]" type
   46 decl: ':' . type

    KW_INT     shift, and go to state 53
    KW_REAL    shift, and go to state 54
    KW_BOOL    shift, and go to state 55
    KW_STRING  shift, and go to state 56
    "[]"       shift, and go to state 57

    type  go to state 58


State 23

   40 decl: . %empty  [';', '}']
   41     | . ',' decl
   41     | ',' . decl
   42     | . IDENTIFIER decl
   43     | . IDENTIFIER ARRAY decl
   44     | . IDENTIFIER ARRAY ASSIGN data decl
   45     | . IDENTIFIER ASSIGN data decl
   46     | . ':' type

    IDENTIFIER  shift, and go to state 21
    ':'         shift, and go to state 22
    ','         shift, and go to state 23

    $default  reduce using rule 40 (decl)

    decl  go to state 59


State 24

    3 body: KW_LET decl . ';'

    ';'  shift, and go to state 60


State 25

   47 infix_operator: . '+'
   48               | . '-'
   49               | . '*'
   50               | . '/'
   51               | . '%'
   52               | . '='
   53               | . '<'
   54               | . KW_NOT_EQL
   55               | . KW_LESS_EQL
   56               | . KW_OR
   57               | . KW_AND
   64 expr: '(' expr . ')'
   65     | expr . infix_operator expr

    KW_AND       shift, and go to state 27
    KW_OR        shift, and go to state 28
    KW_NOT_EQL   shift, and go to state 29
    KW_LESS_EQL  shift, and go to state 30
    '-'          shift, and go to state 31
    '+'          shift, and go to state 32
    '*'          shift, and go to state 33
    '/'          shift, and go to state 34
    ')'          shift, and go to state 61
    '%'          shift, and go to state 36
    '='          shift, and go to state 37
    '<'          shift, and go to state 38

    infix_operator  go to state 39


State 26

   47 infix_operator: . '+'
   48               | . '-'
   49               | . '*'
   50               | . '/'
   51               | . '%'
   52               | . '='
   53               | . '<'
   54               | . KW_NOT_EQL
   55               | . KW_LESS_EQL
   56               | . KW_OR
   57               | . KW_AND
   65 expr: expr . infix_operator expr
   66     | prefix_operator expr .  [KW_AND, KW_OR, KW_NOT_EQL, KW_LESS_EQL, '-', '+', '*', '/', ';', ')', '}', '%', '=', '<']

    KW_AND       shift, and go to state 27
    KW_OR        shift, and go to state 28
    KW_NOT_EQL   shift, and go to state 29
    KW_LESS_EQL  shift, and go to state 30
    '-'          shift, and go to state 31
    '+'          shift, and go to state 32
    '*'          shift, and go to state 33
    '/'          shift, and go to state 34
    '%'          shift, and go to state 36
    '='          shift, and go to state 37
    '<'          shift, and go to state 38

    KW_AND       [reduce using rule 66 (expr)]
    KW_OR        [reduce using rule 66 (expr)]
    KW_NOT_EQL   [reduce using rule 66 (expr)]
    KW_LESS_EQL  [reduce using rule 66 (expr)]
    '-'          [reduce using rule 66 (expr)]
    '+'          [reduce using rule 66 (expr)]
    '*'          [reduce using rule 66 (expr)]
    '/'          [reduce using rule 66 (expr)]
    '%'          [reduce using rule 66 (expr)]
    '='          [reduce using rule 66 (expr)]
    '<'          [reduce using rule 66 (expr)]
    $default     reduce using rule 66 (expr)

    infix_operator  go to state 39


State 27

   57 infix_operator: KW_AND .

    $default  reduce using rule 57 (infix_operator)


State 28

   56 infix_operator: KW_OR .

    $default  reduce using rule 56 (infix_operator)


State 29

   54 infix_operator: KW_NOT_EQL .

    $default  reduce using rule 54 (infix_operator)


State 30

   55 infix_operator: KW_LESS_EQL .

    $default  reduce using rule 55 (infix_operator)


State 31

   48 infix_operator: '-' .

    $default  reduce using rule 48 (infix_operator)


State 32

   47 infix_operator: '+' .

    $default  reduce using rule 47 (infix_operator)


State 33

   49 infix_operator: '*' .

    $default  reduce using rule 49 (infix_operator)


State 34

   50 infix_operator: '/' .

    $default  reduce using rule 50 (infix_operator)


State 35

    5 body: expr ';' .

    $default  reduce using rule 5 (body)


State 36

   51 infix_operator: '%' .

    $default  reduce using rule 51 (infix_operator)


State 37

   52 infix_operator: '=' .

    $default  reduce using rule 52 (infix_operator)


State 38

   53 infix_operator: '<' .

    $default  reduce using rule 53 (infix_operator)


State 39

   58 prefix_operator: . '+'
   59                | . '-'
   60                | . KW_NOT
   61 expr: . POSINT
   62     | . REAL
   63     | . IDENTIFIER
   64     | . '(' expr ')'
   65     | . expr infix_operator expr
   65     | expr infix_operator . expr
   66     | . prefix_operator expr

    IDENTIFIER  shift, and go to state 3
    POSINT      shift, and go to state 4
    REAL        shift, and go to state 5
    KW_NOT      shift, and go to state 6
    '-'         shift, and go to state 9
    '+'         shift, and go to state 10
    '('         shift, and go to state 11

    prefix_operator  go to state 14
    expr             go to state 62


State 40

   38 decl_const: IDENTIFIER ARRAY . ASSIGN data decl_const

    ASSIGN  shift, and go to state 63


State 41

   22 func_decl: KW_CONST IDENTIFIER ASSIGN . '(' func_par_decl ')' ':' type '{' func_body '}'
   30 data: . POSINT
   31     | . REAL
   32     | . STRING
   33     | . KW_TRUE
   34     | . KW_FALSE
   35     | . ARRAY
   37 decl_const: IDENTIFIER ASSIGN . data decl_const

    POSINT    shift, and go to state 64
    REAL      shift, and go to state 65
    STRING    shift, and go to state 66
    ARRAY     shift, and go to state 67
    KW_TRUE   shift, and go to state 68
    KW_FALSE  shift, and go to state 69
    '('       shift, and go to state 70

    data  go to state 71


State 42

   14 const_type: KW_INT .

    $default  reduce using rule 14 (const_type)


State 43

   15 const_type: KW_REAL .

    $default  reduce using rule 15 (const_type)


State 44

   16 const_type: KW_BOOL .

    $default  reduce using rule 16 (const_type)


State 45

   17 const_type: KW_STRING .

    $default  reduce using rule 17 (const_type)


State 46

   39 decl_const: ':' const_type .

    $default  reduce using rule 39 (decl_const)


State 47

   37 decl_const: IDENTIFIER . ASSIGN data decl_const
   38           | IDENTIFIER . ARRAY ASSIGN data decl_const

    ARRAY   shift, and go to state 40
    ASSIGN  shift, and go to state 72


State 48

   36 decl_const: ',' decl_const .

    $default  reduce using rule 36 (decl_const)


State 49

    4 body: KW_CONST decl_const ';' .

    $default  reduce using rule 4 (body)


State 50

   40 decl: . %empty  [';', '}']
   41     | . ',' decl
   42     | . IDENTIFIER decl
   43     | . IDENTIFIER ARRAY decl
   43     | IDENTIFIER ARRAY . decl
   44     | . IDENTIFIER ARRAY ASSIGN data decl
   44     | IDENTIFIER ARRAY . ASSIGN data decl
   45     | . IDENTIFIER ASSIGN data decl
   46     | . ':' type

    IDENTIFIER  shift, and go to state 21
    ASSIGN      shift, and go to state 73
    ':'         shift, and go to state 22
    ','         shift, and go to state 23

    $default  reduce using rule 40 (decl)

    decl  go to state 74


State 51

   30 data: . POSINT
   31     | . REAL
   32     | . STRING
   33     | . KW_TRUE
   34     | . KW_FALSE
   35     | . ARRAY
   45 decl: IDENTIFIER ASSIGN . data decl

    POSINT    shift, and go to state 64
    REAL      shift, and go to state 65
    STRING    shift, and go to state 66
    ARRAY     shift, and go to state 67
    KW_TRUE   shift, and go to state 68
    KW_FALSE  shift, and go to state 69

    data  go to state 75


State 52

   42 decl: IDENTIFIER decl .

    $default  reduce using rule 42 (decl)


State 53

    9 type: KW_INT .

    $default  reduce using rule 9 (type)


State 54

   10 type: KW_REAL .

    $default  reduce using rule 10 (type)


State 55

   11 type: KW_BOOL .

    $default  reduce using rule 11 (type)


State 56

   12 type: KW_STRING .

    $default  reduce using rule 12 (type)


State 57

    9 type: . KW_INT
   10     | . KW_REAL
   11     | . KW_BOOL
   12     | . KW_STRING
   13     | . "[]" type
   13     | "[]" . type

    KW_INT     shift, and go to state 53
    KW_REAL    shift, and go to state 54
    KW_BOOL    shift, and go to state 55
    KW_STRING  shift, and go to state 56
    "[]"       shift, and go to state 57

    type  go to state 76


State 58

   46 decl: ':' type .

    $default  reduce using rule 46 (decl)


State 59

   41 decl: ',' decl .

    $default  reduce using rule 41 (decl)


State 60

    3 body: KW_LET decl ';' .

    $default  reduce using rule 3 (body)


State 61

   64 expr: '(' expr ')' .

    $default  reduce using rule 64 (expr)


State 62

   47 infix_operator: . '+'
   48               | . '-'
   49               | . '*'
   50               | . '/'
   51               | . '%'
   52               | . '='
   53               | . '<'
   54               | . KW_NOT_EQL
   55               | . KW_LESS_EQL
   56               | . KW_OR
   57               | . KW_AND
   65 expr: expr . infix_operator expr
   65     | expr infix_operator expr .  [KW_AND, KW_OR, KW_NOT_EQL, KW_LESS_EQL, '-', '+', '*', '/', ';', ')', '}', '%', '=', '<']

    KW_AND       shift, and go to state 27
    KW_OR        shift, and go to state 28
    KW_NOT_EQL   shift, and go to state 29
    KW_LESS_EQL  shift, and go to state 30
    '-'          shift, and go to state 31
    '+'          shift, and go to state 32
    '*'          shift, and go to state 33
    '/'          shift, and go to state 34
    '%'          shift, and go to state 36
    '='          shift, and go to state 37
    '<'          shift, and go to state 38

    KW_AND       [reduce using rule 65 (expr)]
    KW_OR        [reduce using rule 65 (expr)]
    KW_NOT_EQL   [reduce using rule 65 (expr)]
    KW_LESS_EQL  [reduce using rule 65 (expr)]
    '-'          [reduce using rule 65 (expr)]
    '+'          [reduce using rule 65 (expr)]
    '*'          [reduce using rule 65 (expr)]
    '/'          [reduce using rule 65 (expr)]
    '%'          [reduce using rule 65 (expr)]
    '='          [reduce using rule 65 (expr)]
    '<'          [reduce using rule 65 (expr)]
    $default     reduce using rule 65 (expr)

    infix_operator  go to state 39


State 63

   30 data: . POSINT
   31     | . REAL
   32     | . STRING
   33     | . KW_TRUE
   34     | . KW_FALSE
   35     | . ARRAY
   38 decl_const: IDENTIFIER ARRAY ASSIGN . data decl_const

    POSINT    shift, and go to state 64
    REAL      shift, and go to state 65
    STRING    shift, and go to state 66
    ARRAY     shift, and go to state 67
    KW_TRUE   shift, and go to state 68
    KW_FALSE  shift, and go to state 69

    data  go to state 77


State 64

   30 data: POSINT .

    $default  reduce using rule 30 (data)


State 65

   31 data: REAL .

    $default  reduce using rule 31 (data)


State 66

   32 data: STRING .

    $default  reduce using rule 32 (data)


State 67

   35 data: ARRAY .

    $default  reduce using rule 35 (data)


State 68

   33 data: KW_TRUE .

    $default  reduce using rule 33 (data)


State 69

   34 data: KW_FALSE .

    $default  reduce using rule 34 (data)


State 70

   22 func_decl: KW_CONST IDENTIFIER ASSIGN '(' . func_par_decl ')' ':' type '{' func_body '}'
   24 func_par_decl: . %empty  [')', ',']
   25              | . IDENTIFIER
   26              | . IDENTIFIER '[' ']'
   27              | . IDENTIFIER '[' ']' ':' type func_par_decl
   28              | . IDENTIFIER ':' type func_par_decl
   29              | . func_par_decl ',' func_par_decl

    IDENTIFIER  shift, and go to state 78

    $default  reduce using rule 24 (func_par_decl)

    func_par_decl  go to state 79


State 71

   36 decl_const: . ',' decl_const
   37           | . IDENTIFIER ASSIGN data decl_const
   37           | IDENTIFIER ASSIGN data . decl_const
   38           | . IDENTIFIER ARRAY ASSIGN data decl_const
   39           | . ':' const_type

    IDENTIFIER  shift, and go to state 47
    ':'         shift, and go to state 17
    ','         shift, and go to state 18

    decl_const  go to state 80


State 72

   30 data: . POSINT
   31     | . REAL
   32     | . STRING
   33     | . KW_TRUE
   34     | . KW_FALSE
   35     | . ARRAY
   37 decl_const: IDENTIFIER ASSIGN . data decl_const

    POSINT    shift, and go to state 64
    REAL      shift, and go to state 65
    STRING    shift, and go to state 66
    ARRAY     shift, and go to state 67
    KW_TRUE   shift, and go to state 68
    KW_FALSE  shift, and go to state 69

    data  go to state 71


State 73

   30 data: . POSINT
   31     | . REAL
   32     | . STRING
   33     | . KW_TRUE
   34     | . KW_FALSE
   35     | . ARRAY
   44 decl: IDENTIFIER ARRAY ASSIGN . data decl

    POSINT    shift, and go to state 64
    REAL      shift, and go to state 65
    STRING    shift, and go to state 66
    ARRAY     shift, and go to state 67
    KW_TRUE   shift, and go to state 68
    KW_FALSE  shift, and go to state 69

    data  go to state 81


State 74

   43 decl: IDENTIFIER ARRAY decl .

    $default  reduce using rule 43 (decl)


State 75

   40 decl: . %empty  [';', '}']
   41     | . ',' decl
   42     | . IDENTIFIER decl
   43     | . IDENTIFIER ARRAY decl
   44     | . IDENTIFIER ARRAY ASSIGN data decl
   45     | . IDENTIFIER ASSIGN data decl
   45     | IDENTIFIER ASSIGN data . decl
   46     | . ':' type

    IDENTIFIER  shift, and go to state 21
    ':'         shift, and go to state 22
    ','         shift, and go to state 23

    $default  reduce using rule 40 (decl)

    decl  go to state 82


State 76

   13 type: "[]" type .

    $default  reduce using rule 13 (type)


State 77

   36 decl_const: . ',' decl_const
   37           | . IDENTIFIER ASSIGN data decl_const
   38           | . IDENTIFIER ARRAY ASSIGN data decl_const
   38           | IDENTIFIER ARRAY ASSIGN data . decl_const
   39           | . ':' const_type

    IDENTIFIER  shift, and go to state 47
    ':'         shift, and go to state 17
    ','         shift, and go to state 18

    decl_const  go to state 83


State 78

   25 func_par_decl: IDENTIFIER .  [')', ',']
   26              | IDENTIFIER . '[' ']'
   27              | IDENTIFIER . '[' ']' ':' type func_par_decl
   28              | IDENTIFIER . ':' type func_par_decl

    ':'  shift, and go to state 84
    '['  shift, and go to state 85

    $default  reduce using rule 25 (func_par_decl)


State 79

   22 func_decl: KW_CONST IDENTIFIER ASSIGN '(' func_par_decl . ')' ':' type '{' func_body '}'
   29 func_par_decl: func_par_decl . ',' func_par_decl

    ')'  shift, and go to state 86
    ','  shift, and go to state 87


State 80

   37 decl_const: IDENTIFIER ASSIGN data decl_const .

    $default  reduce using rule 37 (decl_const)


State 81

   40 decl: . %empty  [';', '}']
   41     | . ',' decl
   42     | . IDENTIFIER decl
   43     | . IDENTIFIER ARRAY decl
   44     | . IDENTIFIER ARRAY ASSIGN data decl
   44     | IDENTIFIER ARRAY ASSIGN data . decl
   45     | . IDENTIFIER ASSIGN data decl
   46     | . ':' type

    IDENTIFIER  shift, and go to state 21
    ':'         shift, and go to state 22
    ','         shift, and go to state 23

    $default  reduce using rule 40 (decl)

    decl  go to state 88


State 82

   45 decl: IDENTIFIER ASSIGN data decl .

    $default  reduce using rule 45 (decl)


State 83

   38 decl_const: IDENTIFIER ARRAY ASSIGN data decl_const .

    $default  reduce using rule 38 (decl_const)


State 84

    9 type: . KW_INT
   10     | . KW_REAL
   11     | . KW_BOOL
   12     | . KW_STRING
   13     | . "[]" type
   28 func_par_decl: IDENTIFIER ':' . type func_par_decl

    KW_INT     shift, and go to state 53
    KW_REAL    shift, and go to state 54
    KW_BOOL    shift, and go to state 55
    KW_STRING  shift, and go to state 56
    "[]"       shift, and go to state 57

    type  go to state 89


State 85

   26 func_par_decl: IDENTIFIER '[' . ']'
   27              | IDENTIFIER '[' . ']' ':' type func_par_decl

    ']'  shift, and go to state 90


State 86

   22 func_decl: KW_CONST IDENTIFIER ASSIGN '(' func_par_decl ')' . ':' type '{' func_body '}'

    ':'  shift, and go to state 91


State 87

   24 func_par_decl: . %empty  [')', ',']
   25              | . IDENTIFIER
   26              | . IDENTIFIER '[' ']'
   27              | . IDENTIFIER '[' ']' ':' type func_par_decl
   28              | . IDENTIFIER ':' type func_par_decl
   29              | . func_par_decl ',' func_par_decl
   29              | func_par_decl ',' . func_par_decl

    IDENTIFIER  shift, and go to state 78

    $default  reduce using rule 24 (func_par_decl)

    func_par_decl  go to state 92


State 88

   44 decl: IDENTIFIER ARRAY ASSIGN data decl .

    $default  reduce using rule 44 (decl)


State 89

   24 func_par_decl: . %empty  [')', ',']
   25              | . IDENTIFIER
   26              | . IDENTIFIER '[' ']'
   27              | . IDENTIFIER '[' ']' ':' type func_par_decl
   28              | . IDENTIFIER ':' type func_par_decl
   28              | IDENTIFIER ':' type . func_par_decl
   29              | . func_par_decl ',' func_par_decl

    IDENTIFIER  shift, and go to state 78

    $default  reduce using rule 24 (func_par_decl)

    func_par_decl  go to state 93


State 90

   26 func_par_decl: IDENTIFIER '[' ']' .  [')', ',']
   27              | IDENTIFIER '[' ']' . ':' type func_par_decl

    ':'  shift, and go to state 94

    $default  reduce using rule 26 (func_par_decl)


State 91

    9 type: . KW_INT
   10     | . KW_REAL
   11     | . KW_BOOL
   12     | . KW_STRING
   13     | . "[]" type
   22 func_decl: KW_CONST IDENTIFIER ASSIGN '(' func_par_decl ')' ':' . type '{' func_body '}'

    KW_INT     shift, and go to state 53
    KW_REAL    shift, and go to state 54
    KW_BOOL    shift, and go to state 55
    KW_STRING  shift, and go to state 56
    "[]"       shift, and go to state 57

    type  go to state 95


State 92

   29 func_par_decl: func_par_decl . ',' func_par_decl
   29              | func_par_decl ',' func_par_decl .  [')', ',']

    ','  shift, and go to state 87

    ','       [reduce using rule 29 (func_par_decl)]
    $default  reduce using rule 29 (func_par_decl)


State 93

   28 func_par_decl: IDENTIFIER ':' type func_par_decl .  [')', ',']
   29              | func_par_decl . ',' func_par_decl

    ','  shift, and go to state 87

    ','       [reduce using rule 28 (func_par_decl)]
    $default  reduce using rule 28 (func_par_decl)


State 94

    9 type: . KW_INT
   10     | . KW_REAL
   11     | . KW_BOOL
   12     | . KW_STRING
   13     | . "[]" type
   27 func_par_decl: IDENTIFIER '[' ']' ':' . type func_par_decl

    KW_INT     shift, and go to state 53
    KW_REAL    shift, and go to state 54
    KW_BOOL    shift, and go to state 55
    KW_STRING  shift, and go to state 56
    "[]"       shift, and go to state 57

    type  go to state 96


State 95

   22 func_decl: KW_CONST IDENTIFIER ASSIGN '(' func_par_decl ')' ':' type . '{' func_body '}'

    '{'  shift, and go to state 97


State 96

   24 func_par_decl: . %empty  [')', ',']
   25              | . IDENTIFIER
   26              | . IDENTIFIER '[' ']'
   27              | . IDENTIFIER '[' ']' ':' type func_par_decl
   27              | IDENTIFIER '[' ']' ':' type . func_par_decl
   28              | . IDENTIFIER ':' type func_par_decl
   29              | . func_par_decl ',' func_par_decl

    IDENTIFIER  shift, and go to state 78

    $default  reduce using rule 24 (func_par_decl)

    func_par_decl  go to state 98


State 97

   18 func_body: . %empty  [';', '}']
   19          | . KW_LET decl
   20          | . return_expr
   21          | . func_body ';' func_body
   22 func_decl: KW_CONST IDENTIFIER ASSIGN '(' func_par_decl ')' ':' type '{' . func_body '}'
   23 return_expr: . KW_RETURN expr

    KW_LET     shift, and go to state 99
    KW_RETURN  shift, and go to state 100

    $default  reduce using rule 18 (func_body)

    func_body    go to state 101
    return_expr  go to state 102


State 98

   27 func_par_decl: IDENTIFIER '[' ']' ':' type func_par_decl .  [')', ',']
   29              | func_par_decl . ',' func_par_decl

    ','  shift, and go to state 87

    ','       [reduce using rule 27 (func_par_decl)]
    $default  reduce using rule 27 (func_par_decl)


State 99

   19 func_body: KW_LET . decl
   40 decl: . %empty  [';', '}']
   41     | . ',' decl
   42     | . IDENTIFIER decl
   43     | . IDENTIFIER ARRAY decl
   44     | . IDENTIFIER ARRAY ASSIGN data decl
   45     | . IDENTIFIER ASSIGN data decl
   46     | . ':' type

    IDENTIFIER  shift, and go to state 21
    ':'         shift, and go to state 22
    ','         shift, and go to state 23

    $default  reduce using rule 40 (decl)

    decl  go to state 103


State 100

   23 return_expr: KW_RETURN . expr
   58 prefix_operator: . '+'
   59                | . '-'
   60                | . KW_NOT
   61 expr: . POSINT
   62     | . REAL
   63     | . IDENTIFIER
   64     | . '(' expr ')'
   65     | . expr infix_operator expr
   66     | . prefix_operator expr

    IDENTIFIER  shift, and go to state 3
    POSINT      shift, and go to state 4
    REAL        shift, and go to state 5
    KW_NOT      shift, and go to state 6
    '-'         shift, and go to state 9
    '+'         shift, and go to state 10
    '('         shift, and go to state 11

    prefix_operator  go to state 14
    expr             go to state 104


State 101

   21 func_body: func_body . ';' func_body
   22 func_decl: KW_CONST IDENTIFIER ASSIGN '(' func_par_decl ')' ':' type '{' func_body . '}'

    ';'  shift, and go to state 105
    '}'  shift, and go to state 106


State 102

   20 func_body: return_expr .

    $default  reduce using rule 20 (func_body)


State 103

   19 func_body: KW_LET decl .

    $default  reduce using rule 19 (func_body)


State 104

   23 return_expr: KW_RETURN expr .  [';', '}']
   47 infix_operator: . '+'
   48               | . '-'
   49               | . '*'
   50               | . '/'
   51               | . '%'
   52               | . '='
   53               | . '<'
   54               | . KW_NOT_EQL
   55               | . KW_LESS_EQL
   56               | . KW_OR
   57               | . KW_AND
   65 expr: expr . infix_operator expr

    KW_AND       shift, and go to state 27
    KW_OR        shift, and go to state 28
    KW_NOT_EQL   shift, and go to state 29
    KW_LESS_EQL  shift, and go to state 30
    '-'          shift, and go to state 31
    '+'          shift, and go to state 32
    '*'          shift, and go to state 33
    '/'          shift, and go to state 34
    '%'          shift, and go to state 36
    '='          shift, and go to state 37
    '<'          shift, and go to state 38

    $default  reduce using rule 23 (return_expr)

    infix_operator  go to state 39


State 105

   18 func_body: . %empty  [';', '}']
   19          | . KW_LET decl
   20          | . return_expr
   21          | . func_body ';' func_body
   21          | func_body ';' . func_body
   23 return_expr: . KW_RETURN expr

    KW_LET     shift, and go to state 99
    KW_RETURN  shift, and go to state 100

    $default  reduce using rule 18 (func_body)

    func_body    go to state 107
    return_expr  go to state 102


State 106

   22 func_decl: KW_CONST IDENTIFIER ASSIGN '(' func_par_decl ')' ':' type '{' func_body '}' .

    $default  reduce using rule 22 (func_decl)


State 107

   21 func_body: func_body . ';' func_body
   21          | func_body ';' func_body .  [';', '}']

    ';'  shift, and go to state 105

    ';'       [reduce using rule 21 (func_body)]
    $default  reduce using rule 21 (func_body)
